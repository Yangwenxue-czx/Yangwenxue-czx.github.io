<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>个人电脑重装</title>
    <link href="/2021/06/23/system-reload/"/>
    <url>/2021/06/23/system-reload/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85">TOC</a><br>因为手贱，改了系统的参数之后，电脑无法正常开机，后来通过笔记本的恢复出厂，恢复电脑，那就根据这一次重装进行对电脑整体的清理和修改。</p><h1 id="基本软件"><a href="#基本软件" class="headerlink" title="基本软件"></a>基本软件</h1><ul><li>一些基本软件，在安装的时候需要把所有缓存路径改为非c盘</li></ul><p><img src="https://img-blog.csdnimg.cn/2021062317321480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="程序软件"><a href="#程序软件" class="headerlink" title="程序软件"></a>程序软件</h1><p>程序软件就有很多要下载了，基本的安装包都上传阿里云网盘了。以下是一些在安装软件时用到的博客。</p><ul><li><p>Maven安装</p><blockquote><p><a href="https://blog.csdn.net/a805814077/article/details/100545928">https://blog.csdn.net/a805814077/article/details/100545928</a></p></blockquote></li><li><p> Mysql8.0安装</p><blockquote><p><a href="https://www.cnblogs.com/myqlanzhuangjiaocheng/p/mysqlanzhuang.html">https://www.cnblogs.com/myqlanzhuangjiaocheng/p/mysqlanzhuang.html</a></p></blockquote></li><li><p>git的安装</p><blockquote><p><a href="https://blog.csdn.net/weixin_49457021/article/details/111934543?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_49457021/article/details/111934543?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a></p></blockquote></li><li><p>Node的安装</p><blockquote><p><a href="https://blog.csdn.net/Small_Yogurt/article/details/104968169">https://blog.csdn.net/Small_Yogurt/article/details/104968169</a></p></blockquote></li><li><p>IDEA的安装</p><blockquote><p><a href="https://www.bilibili.com/read/cv5707434/">https://www.bilibili.com/read/cv5707434/</a></p></blockquote></li><li><p>jdk</p></li></ul><blockquote><p><a href="https://blog.csdn.net/wyg1973017714/article/details/105151443">https://blog.csdn.net/wyg1973017714/article/details/105151443</a></p></blockquote><ul><li>vmware16永久激活密钥 （官网下载即可）</li></ul><blockquote><p>ZF3R0-FHED2-M80TY-8QYGC-NPKYF<br>YF390-0HF8P-M81RQ-2DXQE-M2UT6<br>ZF71R-DMX85-08DQY-8YMNC-PPHV8</p></blockquote><p>推荐三个文本和笔记软件</p><ul><li>Typora  ：markdown文档编辑器</li><li>Sublime Text3 ： xml、html文本展示</li><li>Xmind ：思维导图</li></ul><p><img src="https://img-blog.csdnimg.cn/202106231740347.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
    <tags>
      
      <tag>系统重装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/23/hello-world/"/>
    <url>/2021/06/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch初探</title>
    <link href="/2021/06/21/es-api/"/>
    <url>/2021/06/21/es-api/</url>
    
    <content type="html"><![CDATA[<h2 id="ELasticSerach-7-9-2安装过程"><a href="#ELasticSerach-7-9-2安装过程" class="headerlink" title="ELasticSerach 7.9.2安装过程"></a>ELasticSerach 7.9.2安装过程</h2><h2 id="1-windows下总安装文件"><a href="#1-windows下总安装文件" class="headerlink" title="1.windows下总安装文件"></a>1.windows下总安装文件</h2><p>分为以下步骤<br> ELasticSerach 搜索引擎<br> ELasticSerach-head 可视化界面<br> kiBana 请求器<br> ik  分词器<br> 相关华为镜像下载地址：<br> ElasticSearch: <a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D">https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D</a><br>logstash: <a href="https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D">https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D</a><br>kibana: <a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a></p><h2 id="1-1-ELasticSerach"><a href="#1-1-ELasticSerach" class="headerlink" title="1.1 ELasticSerach"></a>1.1 ELasticSerach</h2><p>下载地址</p><blockquote><p> ElasticSearch: <a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D">https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D</a></p></blockquote><p>出现闪退的原因<br>一种是内存过大，则需要调整</p><blockquote><p>config/jvm.options</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210610233604641.png" alt="在这里插入图片描述"><br>另一种原因则</p><blockquote><p>config/elasticSerach.yml</p></blockquote><p>在该文件下添加以下命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xpack.ml.enabled: false<br></code></pre></td></tr></table></figure><h2 id="1-2-elasticsearch-head-master-可视化界面"><a href="#1-2-elasticsearch-head-master-可视化界面" class="headerlink" title="1.2 elasticsearch-head-master 可视化界面"></a>1.2 elasticsearch-head-master 可视化界面</h2><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><blockquote><p>在目录下安装即可<br>cnpm install<br>npm run start</p></blockquote><p>解决跨域问题<br>则在ElasticSearch目录下</p><blockquote><p>config/elasticSerach.yml<br>添加</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">http.cors.enabled: true<br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure><h2 id="1-3-kibana-7-9-2-windows-x86-64"><a href="#1-3-kibana-7-9-2-windows-x86-64" class="headerlink" title="1.3 kibana-7.9.2-windows-x86_64"></a>1.3 kibana-7.9.2-windows-x86_64</h2><blockquote><p>下载地址<br>kibana: <a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a><br>修改目录config/kibana.yml<br>`i18n.locale: “zh-CN”</p></blockquote><h2 id="1-4-ik分词器"><a href="#1-4-ik分词器" class="headerlink" title="1.4 ik分词器"></a>1.4 ik分词器</h2><blockquote><p>下载地址：<br><a href="https://github.com/medcl/elasticsearch-analysis-ik/tags">https://github.com/medcl/elasticsearch-analysis-ik/tags</a></p></blockquote><p><strong>注意版本要跟ElasticSearch一致</strong><br>采用倒排排序，先找词再找文档。</p><p>直接把文件目录放在elasticsearch目录下的plugins里，新建ik文件夹，重开<br>elasticsearch即可自动加入插件</p><p>需要添加自己定义的分词库<br>则在</p><blockquote><p>ik/config/IKAnalyzer.cfg.xml添加<br>并自定义建立dic文件</p></blockquote><h2 id="ELasticSerach-核心概念"><a href="#ELasticSerach-核心概念" class="headerlink" title="ELasticSerach 核心概念"></a>ELasticSerach 核心概念</h2><p>与传统数据库对应<br>| 传统数据库 |ES  |<br>|–|–|<br>| 数据库 |索引  |<br>|  表|类型  |<br>|  记录|文档  |<br>|  属性| 域 |</p><p>并且采用的是倒排排序。</p><h2 id="Rest风格"><a href="#Rest风格" class="headerlink" title="Rest风格"></a>Rest风格</h2><table><thead><tr><th>请求方法</th><th>url</th><th>说明</th></tr></thead><tbody><tr><td>PUT</td><td>/索引名/类型名/文档名</td><td>新建</td></tr><tr><td>POST</td><td>/索引名/类型名/文档名_update</td><td>更新</td></tr><tr><td>GET</td><td>/索引名/类型名/文档名</td><td>搜索</td></tr><tr><td>DELETE</td><td>/索引名/类型名/文档名</td><td>删除</td></tr><tr><td>GET</td><td>/索引名/类型名/_search</td><td>复合搜索</td></tr><tr><td>PUT</td><td>/索引名/类型名/文档名</td><td>更新</td></tr></tbody></table><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li>基础</li></ul><blockquote><p>PUT  /index/_doc/1<br>{<br>    “name” : “czx”,<br>“ago” : 23<br>}<br>// 创建文档，_doc为默认文档类型</p></blockquote><blockquote><p>PUT /index/<br>{<br>“mappings” ：{<br>properties:{<br>  name:{<br>     “type”:”text”<br>}<br>    }<br>}<br>}<br>// 设置相应的字段</p></blockquote><blockquote><p>POST /index/_doc/1_update<br>{<br>“doc”:{<br>    “name”  : “czx”<br>}<br>}<br>// 修改相应的字段</p></blockquote><blockquote><p>GET /index/_doc/1<br>// 获取该索引</p></blockquote><blockquote><p>GET /cat_health<br>// 获取健康值</p></blockquote><blockquote><p>DELETE /index/_doc/1<br>DELETE /index/<br>// 删除</p></blockquote><ul><li>高级</li></ul><p> 1.基础查询</p><p> 2.高级查询</p><h2 id="整合spring-boot-常用API"><a href="#整合spring-boot-常用API" class="headerlink" title="整合spring-boot 常用API"></a>整合spring-boot 常用API</h2><p>引入依赖，版本要跟elasticsearch要一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>撰写配置类，本次采用的是RestHighLevelClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticSearchConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title">restHighLevelClient</span><span class="hljs-params">()</span></span>&#123;<br>        RestHighLevelClient client = <span class="hljs-keyword">new</span> RestHighLevelClient(<br>                RestClient.builder(<br>                        <span class="hljs-keyword">new</span> HttpHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9200</span>, <span class="hljs-string">&quot;http&quot;</span>)));<br>        <span class="hljs-keyword">return</span> client;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> 新建user、索引api、文档api</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer ago;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xc.springboot_es_jpa;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.xc.springboot_es_jpa.entity.User;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.get.GetRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.get.GetResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.index.IndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.update.UpdateRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.update.UpdateResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RequestOptions;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.indices.GetIndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.indices.GetIndexResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.common.xcontent.XContentType;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.QueryBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.QueryBuilders;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.TermQueryBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHits;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.fetch.subphase.FetchSourceContext;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootEsJpaApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-comment">// 索引</span><br>    <span class="hljs-comment">// xxxindexRquest Create Get Delete</span><br>    <span class="hljs-comment">// RestHighLevelClient.indices(). exist get delete</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        CreateIndexRequest createIndexRequest = <span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;student&quot;</span>);<br>        CreateIndexResponse createIndexResponse = restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);<br>        System.out.println(createIndexResponse);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 获得索引</span><br>    <span class="hljs-comment">// GetIndexRequst</span><br>    <span class="hljs-comment">// indeices（）.exists()</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        GetIndexRequest getIndexRequest = <span class="hljs-keyword">new</span> GetIndexRequest(<span class="hljs-string">&quot;spring-boot&quot;</span>);<br>        Boolean judege = restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);<br>        System.out.println(judege);<br>    &#125;<br><br>    <span class="hljs-comment">// 删除索引</span><br>    <span class="hljs-comment">// DeleteIndexRequest</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        DeleteIndexRequest deleteIndexRequest = <span class="hljs-keyword">new</span> DeleteIndexRequest(<span class="hljs-string">&quot;spring-boot&quot;</span>);<br>        AcknowledgedResponse delete = restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);<br>        System.out.println(delete.isAcknowledged());<br>    &#125;<br><br>    <span class="hljs-comment">// 文档</span><br>    <span class="hljs-comment">// IndexRequst source id timeout</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// restHighLevelClient.index</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">creteDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        IndexRequest student = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;student&quot;</span>);<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx&quot;</span>,<span class="hljs-number">23</span>);<br>        student.id(<span class="hljs-string">&quot;1&quot;</span>);<br>        student.source(JSON.toJSONString(user),XContentType.JSON);<br>        student.timeout(<span class="hljs-string">&quot;1s&quot;</span>);<br><br>        restHighLevelClient.index(student,RequestOptions.DEFAULT);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取文档</span><br>    <span class="hljs-comment">// GetRequest</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  IOException</span>&#123;<br>        GetRequest getRequest = <span class="hljs-keyword">new</span> GetRequest(<span class="hljs-string">&quot;student&quot;</span>);<br>        getRequest.id(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-comment">// 不获取返回的_source的上下文</span><br>        getRequest.fetchSourceContext(<span class="hljs-keyword">new</span> FetchSourceContext(<span class="hljs-keyword">false</span>));<br>        getRequest.storedFields(<span class="hljs-string">&quot;_none_&quot;</span>);<br><br>        GetResponse documentFields = restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);<br>        System.out.println(documentFields.toString());<br>        System.out.println(documentFields.getSource().toString());<br>        System.out.println(documentFields.getSourceAsString());<br>    &#125;<br><br><br><br>    <span class="hljs-comment">// 更新</span><br>    <span class="hljs-comment">// UpdateRequest</span><br>    <span class="hljs-comment">// UpdateRequest.doc</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        UpdateRequest updateRequest = <span class="hljs-keyword">new</span> UpdateRequest(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx&quot;</span>,<span class="hljs-number">24</span>);<br>        updateRequest.doc(JSON.toJSONString(user),XContentType.JSON);<br>        UpdateResponse updateResponse = restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);<br>        <br>    &#125;<br><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-comment">// DeleteRequest</span><br>    <span class="hljs-comment">// delete</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  IOException</span>&#123;<br>        DeleteRequest deleteRequest = <span class="hljs-keyword">new</span> DeleteRequest(<span class="hljs-string">&quot;student&quot;</span>);<br>        deleteRequest.id(<span class="hljs-string">&quot;1&quot;</span>);<br>        restHighLevelClient.delete(deleteRequest,RequestOptions.DEFAULT);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//批量添加</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bulkDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BulkRequest bulkRequest = <span class="hljs-keyword">new</span> BulkRequest();<br>        ArrayList&lt;User&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx1&quot;</span>,<span class="hljs-number">21</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx2&quot;</span>,<span class="hljs-number">21</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx3&quot;</span>,<span class="hljs-number">21</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx4&quot;</span>,<span class="hljs-number">21</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx5&quot;</span>,<span class="hljs-number">21</span>));<br><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; users.size() ; i++)&#123;<br>            bulkRequest.add(<span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;student&quot;</span>)<br>            .id(<span class="hljs-string">&quot;&quot;</span>+i)<br>            .source(JSON.toJSONString(users.get(i)),XContentType.JSON));<br>        &#125;<br><br>        BulkResponse bulkResponse = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);<br>        System.out.println(bulkResponse.status());<br>    &#125;<br><br>    <span class="hljs-comment">// 高级查询</span><br>    <span class="hljs-comment">// SearchRequest 查询</span><br>    <span class="hljs-comment">// SearchSourceBuilder 结果</span><br>    <span class="hljs-comment">// QueryBuilders 条件</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">searchDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;student&quot;</span>);<br>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>        <span class="hljs-comment">// QueryBuilders.termQuery();</span><br>        <span class="hljs-comment">// QueryBuilders.matchAllQuery();</span><br>        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;czx1&quot;</span>);<br>        searchSourceBuilder.query(termQueryBuilder);<br>        searchRequest.source(searchSourceBuilder);<br>        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>        SearchHits hits = searchResponse.getHits();<br>        System.out.println(JSON.toJSONString(hits.getHits()));<br>        System.out.println(<span class="hljs-string">&quot;======================&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo个人博客搭载</title>
    <link href="/2021/06/20/hexo/"/>
    <url>/2021/06/20/hexo/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h1 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h1><h2 id="node-js-git-gtibash"><a href="#node-js-git-gtibash" class="headerlink" title="node.js git gtibash"></a>node.js git gtibash</h2><p>node.js 是用来创建项目，和下载一些依赖的。自行百度下载<br>git 这个的话自行下载吧，下完后有自带的gitbash。</p><h1 id="github创建仓库"><a href="#github创建仓库" class="headerlink" title="github创建仓库"></a>github创建仓库</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>在自己的github仓库上创建新仓库<br>注意：仓库名为如下标准</p><blockquote><p>用户名.github.io</p></blockquote><p>注意用户名需要和你的github的用户名要一致。大小写也要一致<br><img src="https://img-blog.csdnimg.cn/20210620111126197.png" alt="在这里插入图片描述"></p><h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><p>之前已经配置ssh的话就忽略这步骤<br>在gitbash 下输入这条语句</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh<span class="hljs-literal">-keygen</span> <span class="hljs-literal">-t</span> rsa <span class="hljs-literal">-C</span> <span class="hljs-string">&quot;你注册的邮箱名&quot;</span><br></code></pre></td></tr></table></figure><p>之后去寻找曾现的路径，打开id_rsa.pub文件复制ssh到github中。</p><blockquote><p>个人用户-setting-ssh and gpc keys</p></blockquote><p>新建，然后名字随便起，内容为你复制的ssh keys，点击完成。<br><img src="https://img-blog.csdnimg.cn/20210620104800659.png" alt="在这里插入图片描述"><br>之后在gitbash配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git config -<span class="hljs-literal">-global</span> user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config -<span class="hljs-literal">-global</span> user.name <span class="hljs-string">&quot;邮箱&quot;</span><br></code></pre></td></tr></table></figure><h1 id="hexo项目"><a href="#hexo项目" class="headerlink" title="hexo项目"></a>hexo项目</h1><ul><li>首先在node.js安装好的前提下<br>建一个文件夹来存放hexo项目的内容</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span>  进入该文件夹<br></code></pre></td></tr></table></figure><ul><li>输入安装装hexo命令：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm i <span class="hljs-literal">-g</span> hexo<br></code></pre></td></tr></table></figure><ul><li>查看版本</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo <span class="hljs-literal">-v</span><br></code></pre></td></tr></table></figure><ul><li>初始化项目<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo init<br></code></pre></td></tr></table></figure></li></ul><p>生成以下文件<br><img src="https://img-blog.csdnimg.cn/20210620105331907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>主要配置是_config.yml<br>node_modules：依赖包<br>public：存放的是已经生成的页面<br>scaffolds：命令生成文章等的一些模板<br>source：用命令创建的各种文章<br>package.json：项目所需依赖的信息</li></ul><ul><li>修改_config.yml内容绑定远程仓库</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">deploy: <br>  type: git<br>  repository: git@github.com:用户名/用户名.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>注意这里的分支要和你建的仓库的主分支要对应</p><p>注意：<br>需要添加REMAD.md在source文件夹下<br>之后在_config.yml里添加上传不要转换为html格式</p><blockquote><p>skip_render: README.md</p></blockquote><h2 id="运行本地项目"><a href="#运行本地项目" class="headerlink" title="运行本地项目"></a>运行本地项目</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo clean <br>hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><p>访问 <a href="http://localhost:4000查看">http://localhost:4000查看</a></p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>在以下网站寻找你想要的主题</p><blockquote><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><p>然后在你的gitbash当中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git clone 主题仓库路径 themes/主题名<br></code></pre></td></tr></table></figure><p>之后在hexo项目的_config.yml修改主题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">theme: 主题文件名<br></code></pre></td></tr></table></figure><p>之后执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><h2 id="上传部署"><a href="#上传部署" class="headerlink" title="上传部署"></a>上传部署</h2><p>（前提你的github仓库创建完成以及相应git的配置信息正确）</p><p>先安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install hexo<span class="hljs-literal">-deployer</span><span class="hljs-literal">-git</span> -<span class="hljs-literal">-save</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo d<br></code></pre></td></tr></table></figure><p>去到github中查看文件是否上传成功，此生成的文件跟hexo目录下的文件是不一样的，是生成一些静态的文件。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>直接浏览器地址访问仓库名</p><blockquote><p>用户名.github.io </p></blockquote><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>在hexo目录下，gitbash</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new ”博客名“<br></code></pre></td></tr></table></figure><p>在source/_posts 下编写文本，支持md，然后再执行生成，上传</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo <span class="hljs-literal">-clean</span><br>hexo <span class="hljs-literal">-g</span><br>hexo <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其余的配置，主要查看主题的相应配置，不同主题配置也不同。<br>其实有些省略步骤，也有些不足，请直接提出来即可。<br>至于绑定域名以后再说。<br>本次主题应用的是如下</p><blockquote><p><a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a><br>绑定域名，可参照以下链接。<br><a href="https://www.cnblogs.com/visugar/p/6821777.html">https://www.cnblogs.com/visugar/p/6821777.html</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2021/06/19/my-first-blog/"/>
    <url>/2021/06/19/my-first-blog/</url>
    
    <content type="html"><![CDATA[<p>羊文学<br>Yangwenxue-czx</p><p>欢迎来到我个人博客<br>在此以此博客记录在个人博客网站下撰写的第一条博客</p>]]></content>
    
    
    
    <tags>
      
      <tag>第一篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
