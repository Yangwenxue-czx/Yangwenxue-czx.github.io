<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>获取包下所有的枚举类值</title>
    <link href="/2021/08/10/2021-8-10-%E8%8E%B7%E5%8F%96%E5%8C%85%E4%B8%8B%E6%89%80%E6%9C%89%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%80%BC/"/>
    <url>/2021/08/10/2021-8-10-%E8%8E%B7%E5%8F%96%E5%8C%85%E4%B8%8B%E6%89%80%E6%9C%89%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>如何撰写一个获取包下所有的枚举值</p><span id="more"></span><p>@<a href="%E8%8E%B7%E5%8F%96%E5%8C%85%E4%B8%8B%E6%89%80%E6%9C%89%E7%9A%84%E6%9E%9A%E4%B8%BE%E5%80%BC">TOC</a></p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>今天接到一个人任务，要获取项目中所有的枚举类供维护人员查看，有想到swagger来形成文档，但是没有找到具体的解决方案，固借鉴别人的方法来实现自己的需求。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnumTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Set&lt;Class&lt;?&gt;&gt; classes = getClasses(<span class="hljs-string">&quot;包名&quot;</span>);<br>        List&lt;Class&lt;?&gt;&gt; anEnums = classes.stream().filter(v -&gt; v.getName().endsWith(<span class="hljs-string">&quot;Enum&quot;</span>)).collect(Collectors.toList());<br>        List&lt;String&gt; aClass = anEnums.stream().map(v -&gt; v.getName().replace(<span class="hljs-string">&quot;class &quot;</span>,<span class="hljs-string">&quot;&quot;</span>)).collect(Collectors.toList());<br>        List&lt;List&lt;Map&lt;String,List&lt;Map&lt;String, Object&gt;&gt;&gt;&gt;&gt; lists = Lists.newArrayList();<br>        <span class="hljs-keyword">for</span>(String word : aClass)&#123;<br>            List&lt;Map&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt;&gt; allEnumByClassName = <span class="hljs-keyword">this</span>.getAllEnumByClassName(word);<br>            lists.add(allEnumByClassName);<br>        &#125;<br>        lists.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Map&lt;String,List&lt;Map&lt;String, Object&gt;&gt;&gt;&gt; getAllEnumByClassName(String className) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1.得到枚举类对象</span><br>        Class&lt;Enum&gt; clz = (Class&lt;Enum&gt;) Class.forName(className);<br>        <span class="hljs-comment">// 2.得到所有枚举常量</span><br>        Object[] objects = clz.getEnumConstants();<br>        Method[] fields = clz.getDeclaredMethods();<br>        List&lt;String&gt; getMethod = Lists.newArrayList();<br>        <span class="hljs-keyword">for</span>(Method method : fields)&#123;<br>            String methodString = method.getName().startsWith(<span class="hljs-string">&quot;get&quot;</span>) ? method.getName() : <span class="hljs-string">&quot;&quot;</span>;<br>            getMethod.add(methodString);<br>        &#125;<br>        List&lt;String&gt; collect = getMethod.stream().filter(v -&gt; !v.equals(<span class="hljs-string">&quot;&quot;</span>)).collect(Collectors.toList());<br>        Method getCode = clz.getMethod(collect.get(<span class="hljs-number">0</span>));<br>        Method getMessage = clz.getMethod(collect.get(<span class="hljs-number">1</span>));<br>        List&lt;Map&lt;String,List&lt;Map&lt;String, Object&gt;&gt;&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Map&lt;String,List&lt;Map&lt;String, Object&gt;&gt;&gt;&gt;();<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">null</span>;<br>        Map&lt;String,List&lt;Map&lt;String, Object&gt;&gt;&gt; maps = <span class="hljs-keyword">null</span>;<br>        List&lt;Map&lt;String,Object&gt;&gt; list1 = Lists.newArrayList();<br>        <span class="hljs-keyword">for</span> (Object obj : objects) &#123;<br>            map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>            map.put(collect.get(<span class="hljs-number">1</span>).replace(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;&quot;</span>), getMessage.invoke(obj));<br>            map.put(collect.get(<span class="hljs-number">0</span>).replace(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;&quot;</span>), getCode.invoke(obj));<br>            list1.add(map);<br>        &#125;<br>        maps = <span class="hljs-keyword">new</span> HashMap&lt;String,List&lt;Map&lt;String, Object&gt;&gt;&gt;();<br>        maps.put(className,list1);<br>        list.add(maps);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从包package中获取所有的Class</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pack</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getClasses(String pack) &#123;<br><br>        <span class="hljs-comment">// 第一个class类的集合</span><br>        Set&lt;Class&lt;?&gt;&gt; classes = <span class="hljs-keyword">new</span> LinkedHashSet&lt;Class&lt;?&gt;&gt;();<br>        <span class="hljs-comment">// 是否循环迭代</span><br>        <span class="hljs-keyword">boolean</span> recursive = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">// 获取包的名字 并进行替换</span><br>        String packageName = pack;<br>        String packageDirName = packageName.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>        <span class="hljs-comment">// 定义一个枚举的集合 并进行循环来处理这个目录下的things</span><br>        Enumeration&lt;URL&gt; dirs;<br>        <span class="hljs-keyword">try</span> &#123;<br>            dirs = Thread.currentThread().getContextClassLoader().getResources(<br>                    packageDirName);<br>            <span class="hljs-comment">// 循环迭代下去</span><br>            <span class="hljs-keyword">while</span> (dirs.hasMoreElements()) &#123;<br>                <span class="hljs-comment">// 获取下一个元素</span><br>                URL url = dirs.nextElement();<br>                <span class="hljs-comment">// 得到协议的名称</span><br>                String protocol = url.getProtocol();<br>                <span class="hljs-comment">// 如果是以文件的形式保存在服务器上</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;file&quot;</span>.equals(protocol)) &#123;<br>                    System.err.println(<span class="hljs-string">&quot;file类型的扫描&quot;</span>);<br>                    <span class="hljs-comment">// 获取包的物理路径</span><br>                    String filePath = URLDecoder.decode(url.getFile(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                    <span class="hljs-comment">// 以文件的方式扫描整个包下的文件 并添加到集合中</span><br>                    findAndAddClassesInPackageByFile(packageName, filePath,<br>                            recursive, classes);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jar&quot;</span>.equals(protocol)) &#123;<br>                    <span class="hljs-comment">// 如果是jar包文件</span><br>                    <span class="hljs-comment">// 定义一个JarFile</span><br>                    System.err.println(<span class="hljs-string">&quot;jar类型的扫描&quot;</span>);<br>                    JarFile jar;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 获取jar</span><br>                        jar = ((JarURLConnection) url.openConnection())<br>                                .getJarFile();<br>                        <span class="hljs-comment">// 从此jar包 得到一个枚举类</span><br>                        Enumeration&lt;JarEntry&gt; entries = jar.entries();<br>                        <span class="hljs-comment">// 同样的进行循环迭代</span><br>                        <span class="hljs-keyword">while</span> (entries.hasMoreElements()) &#123;<br>                            <span class="hljs-comment">// 获取jar里的一个实体 可以是目录 和一些jar包里的其他文件 如META-INF等文件</span><br>                            JarEntry entry = entries.nextElement();<br>                            String name = entry.getName();<br>                            <span class="hljs-comment">// 如果是以/开头的</span><br>                            <span class="hljs-keyword">if</span> (name.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>                                <span class="hljs-comment">// 获取后面的字符串</span><br>                                name = name.substring(<span class="hljs-number">1</span>);<br>                            &#125;<br>                            <span class="hljs-comment">// 如果前半部分和定义的包名相同</span><br>                            <span class="hljs-keyword">if</span> (name.startsWith(packageDirName)) &#123;<br>                                <span class="hljs-keyword">int</span> idx = name.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>);<br>                                <span class="hljs-comment">// 如果以&quot;/&quot;结尾 是一个包</span><br>                                <span class="hljs-keyword">if</span> (idx != -<span class="hljs-number">1</span>) &#123;<br>                                    <span class="hljs-comment">// 获取包名 把&quot;/&quot;替换成&quot;.&quot;</span><br>                                    packageName = name.substring(<span class="hljs-number">0</span>, idx)<br>                                            .replace(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>                                &#125;<br>                                <span class="hljs-comment">// 如果可以迭代下去 并且是一个包</span><br>                                <span class="hljs-keyword">if</span> ((idx != -<span class="hljs-number">1</span>) || recursive) &#123;<br>                                    <span class="hljs-comment">// 如果是一个.class文件 而且不是目录</span><br>                                    <span class="hljs-keyword">if</span> (name.endsWith(<span class="hljs-string">&quot;.class&quot;</span>)<br>                                            &amp;&amp; !entry.isDirectory()) &#123;<br>                                        <span class="hljs-comment">// 去掉后面的&quot;.class&quot; 获取真正的类名</span><br>                                        String className = name.substring(<br>                                                packageName.length() + <span class="hljs-number">1</span>, name<br>                                                        .length() - <span class="hljs-number">6</span>);<br>                                        <span class="hljs-keyword">try</span> &#123;<br>                                            <span class="hljs-comment">// 添加到classes</span><br>                                            classes.add(Class<br>                                                    .forName(packageName + <span class="hljs-string">&#x27;.&#x27;</span><br>                                                            + className));<br>                                        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                                            <span class="hljs-comment">// log</span><br>                                            <span class="hljs-comment">// .error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span><br>                                            e.printStackTrace();<br>                                        &#125;<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        <span class="hljs-comment">// log.error(&quot;在扫描用户定义视图时从jar包获取文件出错&quot;);</span><br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> classes;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findAndAddClassesInPackageByFile</span><span class="hljs-params">(String packageName,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                        String packagePath, <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> recursive, Set&lt;Class&lt;?&gt;&gt; classes)</span> </span>&#123;<br>        <span class="hljs-comment">// 获取此包的目录 建立一个File</span><br>        File dir = <span class="hljs-keyword">new</span> File(packagePath);<br>        <span class="hljs-comment">// 如果不存在或者 也不是目录就直接返回</span><br>        <span class="hljs-keyword">if</span> (!dir.exists() || !dir.isDirectory()) &#123;<br>            <span class="hljs-comment">// log.warn(&quot;用户定义包名 &quot; + packageName + &quot; 下没有任何文件&quot;);</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果存在 就获取包下的所有文件 包括目录</span><br>        File[] dirfiles = dir.listFiles(<span class="hljs-keyword">new</span> FileFilter() &#123;<br>            <span class="hljs-comment">// 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">accept</span><span class="hljs-params">(File file)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> (recursive &amp;&amp; file.isDirectory())<br>                        || (file.getName().endsWith(<span class="hljs-string">&quot;.class&quot;</span>));<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 循环所有文件</span><br>        <span class="hljs-keyword">for</span> (File file : dirfiles) &#123;<br>            <span class="hljs-comment">// 如果是目录 则继续扫描</span><br>            <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>                findAndAddClassesInPackageByFile(packageName + <span class="hljs-string">&quot;.&quot;</span><br>                                + file.getName(), file.getAbsolutePath(), recursive,<br>                        classes);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果是java类文件 去掉后面的.class 只留下类名</span><br>                String className = file.getName().substring(<span class="hljs-number">0</span>,<br>                        file.getName().length() - <span class="hljs-number">6</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 添加到集合中去</span><br>                    <span class="hljs-comment">//classes.add(Class.forName(packageName + &#x27;.&#x27; + className));</span><br>                    <span class="hljs-comment">//经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净</span><br>                    classes.add(Thread.currentThread().getContextClassLoader().loadClass(packageName + <span class="hljs-string">&#x27;.&#x27;</span> + className));<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                    <span class="hljs-comment">// log.error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/aochou19810706/article/details/101596219">https://blog.csdn.net/aochou19810706/article/details/101596219</a><br>相关代码出处，感谢老铁，以上代码是借鉴此类代码进行修改得到自己想要的。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一般撰写工具类，先想下有什么方法可以解决，然后通过注释，先定义总体的框架，再去寻找解决方案，由总-分-总的测试。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>enum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis标签</title>
    <link href="/2021/07/28/2021-7-28-mybatis%E6%A0%87%E7%AD%BE/"/>
    <url>/2021/07/28/2021-7-28-mybatis%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<p>mybatis是常用的持久层框架，利用好标签可以优化好多sql语句，达到想要的效果</p><span id="more"></span><p>@<a href="mybatis_9%E5%A4%A7%E6%A0%87%E7%AD%BE">TOC</a></p><h1 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h1><h2 id=""><a href="#" class="headerlink" title=""></a><if></if></h2><p>是作为判断，一般判断列段是否存在或者等于某个属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name ！=null&quot;</span> &gt;</span><br>and name = #&#123;name&#125;,<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><foreach></foreach></h2><p>用户list或者set的迭代</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>         #&#123;item&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><choose></choose></h2><p>作为判断，里面包含<when></when> <otherwise></otherwise><br>当语句里面符合一个条件时，choose结束，否则执行<otherwise></otherwise>语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;getById&quot;</span> &gt;</span><br>select * from student<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span> = <span class="hljs-string">“name</span> != <span class="hljs-string">null”</span>&gt;</span><br>name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span> = <span class="hljs-string">“ago</span> != <span class="hljs-string">null”</span>&gt;</span><br>ago= #&#123;ago&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span> <span class="hljs-attr">test</span> = <span class="hljs-string">&quot;id != null&quot;</span>&gt;</span><br>id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><where></where></h2><p>是作为判断where与多项<if>的作用，主要为了自动添加where关键字，如果有and或者or ，则会剔除 ,上面一展示</p><h2 id="-4"><a href="#-4" class="headerlink" title=""></a><trim></trim></h2><p>主要用于格式化输出</p><h2 id="-5"><a href="#-5" class="headerlink" title=""></a><sql></sql></h2><p>作为sql片段，进行复用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span> = <span class="hljs-string">colunm</span> &gt;</span><br>id,ago,name<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="-6"><a href="#-6" class="headerlink" title=""></a><include></include></h2><p>可以绑定<sql></sql>标签进行对代码段服用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>select <br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>= <span class="hljs-string">colunm</span>  /&gt;</span><br>from student&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="-7"><a href="#-7" class="headerlink" title=""></a><bind></bind></h2><p>动态更改字符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;ago&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;ago +1 &quot;</span>  /&gt;</span><br>where ago = #&#123;ago&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql查询万级数据优化</title>
    <link href="/2021/07/27/2021-7-27-sql%E6%9F%A5%E8%AF%A2%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BC%98%E5%8C%96/"/>
    <url>/2021/07/27/2021-7-27-sql%E6%9F%A5%E8%AF%A2%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>今天点击分页的时候，点击到86363页，出现了系统在转圈圈赚了快一分钟，寻思着以为电脑坏了，仔细一看，竟是代码的问题，于是乎请教导师之后。emmm。看来是我见识短浅了。为了提高系统的响应能力，不得不进行优化sql处理应对万级数据了。</p><span id="more"></span><p>@<a href="sql%E6%9F%A5%E8%AF%A2%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE%E4%BC%98%E5%8C%96">TOC</a></p><h1 id="为何要优化自己的sql？"><a href="#为何要优化自己的sql？" class="headerlink" title="为何要优化自己的sql？"></a>为何要优化自己的sql？</h1><p>今天点击分页的时候，点击到86363页，出现了系统在转圈圈赚了快一分钟，寻思着以为电脑坏了，仔细一看，竟是代码的问题，于是乎请教导师之后。emmm。看来是我见识短浅了。为了提高系统的响应能力，不得不进行优化sql处理应对万级数据了。</p><h1 id="我是怎么做到优化的？"><a href="#我是怎么做到优化的？" class="headerlink" title="我是怎么做到优化的？"></a>我是怎么做到优化的？</h1><h2 id="sql语句优化"><a href="#sql语句优化" class="headerlink" title="sql语句优化"></a>sql语句优化</h2><p>其实都知道，mysql支持索引机制，在查询条件的时候，尽量查询索引。但我之前都没有走，以为查出来就是王道。</p><ul><li><strong>分页</strong><br>假如直接查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> limit <span class="hljs-number">1000000</span>,<span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><p> 时间长达一分钟以上.<br> 优化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> limit <span class="hljs-number">1000000</span>,<span class="hljs-number">1000</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (刚才查出来的id列)；<br></code></pre></td></tr></table></figure><p> 这时你会发现飞一样的感觉，原因是查出来的id值列是走索引，再利用索引覆盖的机制，进行对id列进行取值，时间自然减少了。值得注意的是，在两个查询的id的时候，两者对id排序是有不同的，所以要对id的排序做规定，才能保证两者相同</p><ul><li><strong>in 与 between</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id  <span class="hljs-keyword">in</span> （id列）；<br></code></pre></td></tr></table></figure><p> 假如id为有顺序的，避免in的使用不走索引。建议采用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-keyword">between</span> 初始值 <span class="hljs-keyword">and</span> 结尾值；<br></code></pre></td></tr></table></figure><p> 两者左右都是包括在内的。</p><ul><li><strong>or 与 union</strong><br> 亲测有效</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">10000</span> <span class="hljs-keyword">or</span> id <span class="hljs-operator">=</span> <span class="hljs-number">20000</span>;<br></code></pre></td></tr></table></figure><p> 优化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br><span class="hljs-operator">-</span> <span class="hljs-keyword">union</span><br><span class="hljs-operator">-</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">20000</span>;<br></code></pre></td></tr></table></figure><p>时间也降低了不少，建议在数量丰富的数据库里查询。这样效果会明显。</p><ul><li><strong>模糊查询</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> &quot;%chen%&quot;;<br></code></pre></td></tr></table></figure><p>  假如使用前缀索引，在开头避免添加%</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> &quot;chen%&quot;;<br></code></pre></td></tr></table></figure><ul><li><strong>索引最前匹配</strong><br>假如有索引    index_for_student(name,ago)<br>以下是不走索引，原因是复合索引会走最前匹配，故单单ago是不支持索引的。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> ago <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br></code></pre></td></tr></table></figure><p>走索引情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;陈&#x27;</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span>  <span class="hljs-string">&#x27;陈&#x27;</span> <span class="hljs-keyword">and</span> ago <span class="hljs-operator">=</span> <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><ul><li><strong>尽量不要select * ，需要查什么字段就什么字段</strong></li><li><strong>在反复出现where 和 order by 下的查询语句要添加索引</strong></li><li> <strong>不要将表达式至于左边</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">15</span><span class="hljs-operator">*</span><span class="hljs-number">9</span> <span class="hljs-operator">=</span> name；<br></code></pre></td></tr></table></figure><ul><li><strong>order by的字段最好与where 后面字段一致</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> ago <span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> ago;<br></code></pre></td></tr></table></figure><h2 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h2><p>当然，在平常sql语句优化，在建立数据库时也要进行优化。</p><ul><li>文本索引可以使用fulltext 全文索引来，但数据量大的建议走es，秒级查询</li><li>在将来可能出现大量查询的字段添加索引，或者复合索引</li><li>选择合适的字段类型，比如varchar 替代char。字段设计也要考虑用数字替代一些文字，例如性别可以用 0 或1 表示</li><li>选择合适的引擎</li><li>用‘’或者0替代 null字段，查询速度会上升许多<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>尝试一下是否有作用，自己尝试之后两者区别巨大。</p><ul><li>索引不是越多越好，也会存在相应的内存损耗，导致查询效果慢，所以要根据需求，在达到最优的情况下（没有最优，只有相对），设计符合系统需求的设计。</li><li></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>索引的好处可以明显看出来，但是像维生素一样，涉入过多，自己身体也会发生不良反应，所以具体需求具体设计。<br>在进行对数据库查询时，要根据自身作为用户去体会，而非自己能完成工作就可以，要往最优、最快、以及最实践的方法去修改自己的代码。</p><p>本文会持续更新（只是整理与笔记，具体还是自己尝试是否符合自己，可以用explain 解释自己的sql语句走了索引没）。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库mysql-redis链接错误</title>
    <link href="/2021/07/26/2021-7-26-%E6%95%B0%E6%8D%AE%E5%BA%93mysql-redis%E9%93%BE%E6%8E%A5%E9%94%99%E8%AF%AF/"/>
    <url>/2021/07/26/2021-7-26-%E6%95%B0%E6%8D%AE%E5%BA%93mysql-redis%E9%93%BE%E6%8E%A5%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>什么？搭建的数据库朋友连接不上了？其实我一点也不想搞这些系统，之前说可以用dokcer，虽然说是方便，但是要更改里面的配置文件就要深挖。所以就自己装了</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h4 id="首先是navicat连接数据库的问题。"><a href="#首先是navicat连接数据库的问题。" class="headerlink" title="首先是navicat连接数据库的问题。"></a>首先是navicat连接数据库的问题。</h4><p>出现2013</p><p>原因如下：</p><p>mysql8的加密方式是不同以往版本的，所以要更新一下权限</p><p>接着出现连接不是，那是腾讯云服务器并没有开启端口，但这样也有方法进入</p><p>首先</p><p><img src="https://img-blog.csdnimg.cn/fbcfee6435c749cc8adc7714e15dbbcb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在主机填写mysql的用户民和密码，主机填写 127.0.0.1</p><p>接着</p><p><img src="https://img-blog.csdnimg.cn/5019604d9cfe448583d0d58a7e5a5eed.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ylB79ltF-1627341803826)(C:\Users\Yangwenxue\AppData\Roaming\Typora\typora-user-images\image-20210726224548721.png)]"></p><p>ssh是用来填写远程服务器的问题。</p><p>所以主机要写远程服务器的地址。用户名和密码也是填写登录远程服务器的用户名和密码，并不是mysql的</p><p>当然，你只要开放接口，即可直接用常规填写主机地址和mysql用户名和密码即可登录。就不用那么麻烦了、。</p><h4 id="接着是redis问题"><a href="#接着是redis问题" class="headerlink" title="接着是redis问题"></a>接着是redis问题</h4><p>远程服务器搭建redis的时候，会出现连接不上。原因也是没有开放端口</p><p>但是开放端口后，也要配置redis.conf的保护模式和远程地址。否则也是登录不是。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>打开腾讯云 - 管理 - 防护墙- 开打3306 和 6379 端口 即可使用远程服务器地址进行登录。亲测有效！！</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql优化</title>
    <link href="/2021/07/26/2021-7-26-sql%E4%BC%98%E5%8C%96/"/>
    <url>/2021/07/26/2021-7-26-sql%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>今天无聊观看代码的时候，发现了一串查询分了两次去查询数据库，寻思着想着一次查询不行吗？就直接跟着代码，体会到sql优化对编程来说有多重要，因为提高的不止一点点。</p><p>@<a href="%E8%BF%99%E9%87%8C%E5%86%99%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98">TOC</a></p><h1 id="sql语句优化"><a href="#sql语句优化" class="headerlink" title="sql语句优化"></a>sql语句优化</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from user limit 1000000,1000<br></code></pre></td></tr></table></figure><p>从数据库中豪取一百万数据开始后的1000条数据，你看看要多久，试了以下大概30s以上。</p><p>换种思路</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select id from user limit 1000000,1000<br></code></pre></td></tr></table></figure><p>先查出主键索引的id值，查出来时间大约会1s</p><p>再覆盖索引进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from user where id in(刚才查出来的id列)<br></code></pre></td></tr></table></figure><p>查出来时间大概在10s以内</p><p>所以利用索引可以高效率查询分页语句，甚至在之后的查询也要好好利用索引。</p><p>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from user limit 1000000,1000<br><br>select id from user limit 1000000,1000<br></code></pre></td></tr></table></figure><p>随着数据量大，两次查询出来的id值是不同的，因为引擎的排序和索引的排序在数据量多的地方下排序方式是不同的，为了防止不同，需要在第二句加上order by 进行对id列排序。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何获取wx_openid</title>
    <link href="/2021/07/25/2021-7-25-wx-openid/"/>
    <url>/2021/07/25/2021-7-25-wx-openid/</url>
    
    <content type="html"><![CDATA[<p>在开发微信小程序的时候，需要唯一标识每一个用户，利用wx的原生wx.login()来说，只能获取用户的基本属性，假如根据用户名作为标识，下一次微信改个名字就无法获得了，所以这时就需要oppenid来发挥作用了。</p><span id="more"></span><p>@<a href="%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%8E%B7%E5%8F%96oppenid">TOC</a></p><h1 id="获取openid的作用"><a href="#获取openid的作用" class="headerlink" title="获取openid的作用"></a>获取openid的作用</h1><p>在开发微信小程序的时候，需要唯一标识每一个用户，利用wx的原生wx.login()来说，只能获取用户的基本属性，假如根据用户名作为标识，下一次微信改个名字就无法获得了，所以这时就需要oppenid来发挥作用了。<br>oppenid是根据wx.login()获取用户的code值，再由code值去请求远程的用户认证的接口，即可返回openid。这个openid为每个小程序绑定用户的唯一凭证</p><h1 id="怎么获取openid"><a href="#怎么获取openid" class="headerlink" title="怎么获取openid"></a>怎么获取openid</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs javascript">App(&#123;<br>  <span class="hljs-attr">globalData</span>: &#123;<br>    <span class="hljs-attr">userInfo</span>: <span class="hljs-literal">null</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">onLaunch</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 展示本地存储能力</span><br>    <span class="hljs-keyword">const</span> logs = wx.getStorageSync(<span class="hljs-string">&#x27;logs&#x27;</span>) || []<br>    logs.unshift(<span class="hljs-built_in">Date</span>.now())<br>    wx.setStorageSync(<span class="hljs-string">&#x27;logs&#x27;</span>, logs)<br>    <br>    <span class="hljs-keyword">var</span> that =<span class="hljs-built_in">this</span><br>    <span class="hljs-keyword">var</span> app = getApp()<br><br>    <span class="hljs-comment">// 登录</span><br>    wx.getSetting(&#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (res.authSetting[<span class="hljs-string">&#x27;scope.userInfo&#x27;</span>]) &#123;<br>          <span class="hljs-comment">// 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框</span><br>          wx.getUserInfo(&#123;<br>            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>              <span class="hljs-comment">// 可以将 res 发送给后台解码出 unionId</span><br>              that.globalData.userInfo = res.userInfo<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.globalData.userInfo )<br>              <span class="hljs-comment">// 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回</span><br>              <span class="hljs-comment">// 所以此处加入 callback 以防止这种情况</span><br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.userInfoReadyCallback) &#123;<br>                <span class="hljs-built_in">this</span>.userInfoReadyCallback(res)<br>              &#125;<br>            &#125;<br>          &#125;)<br>        &#125;<br>      &#125;<br>    &#125;)<br>    wx.login(&#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.getUserInfoId(res)<br><br>      &#125;<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">getUserInfoId</span>(<span class="hljs-params">res</span>)</span> &#123;<br>    wx.request(&#123;     <br>      <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;https://api.weixin.qq.com/sns/jscode2session&#x27;</span>,        <br>      <span class="hljs-attr">data</span>:&#123;          <br>        <span class="hljs-attr">appid</span>: <span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-comment">//你的小程序的APPID</span><br>        <span class="hljs-attr">secret</span>: <span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-comment">//你的小程序的APPSecret       </span><br>        <span class="hljs-attr">js_code</span>: res.code,          <span class="hljs-comment">//通过wx.login接口获得的登录凭证</span><br>        <span class="hljs-attr">grant_type</span>: <span class="hljs-string">&#x27;authorization_code&#x27;</span>&#125;,     <span class="hljs-comment">//看官方文档   </span><br>      <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,        <br>      <span class="hljs-attr">header</span>:&#123;<span class="hljs-string">&#x27;content-type&#x27;</span>:<span class="hljs-string">&#x27;application/json&#x27;</span>&#125;,        <br>      <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;         <br>        <span class="hljs-built_in">console</span>.log(res.data.openid)<br>        wx.setStorageSync(<span class="hljs-string">&#x27;openid&#x27;</span>, res.data.openid)  <span class="hljs-comment">//存入本地缓存,key为openid              </span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;返回成功&quot;</span>+wx.getStorageSync(<span class="hljs-string">&#x27;openid&#x27;</span>))<br>        <span class="hljs-built_in">this</span>.globalData.user_id = wx.getStorageSync(<span class="hljs-string">&#x27;openid&#x27;</span>)<br>      <span class="hljs-comment">//   wx.request(&#123;</span><br> <br>      <span class="hljs-comment">//    url: &#x27;根据openid去请求你的服务后台就行拉&#x27;,</span><br>      <span class="hljs-comment">//    complete: (res) =&gt; &#123;</span><br>      <span class="hljs-comment">//    &#125;,</span><br>      <span class="hljs-comment">//    data: &#123;</span><br>      <span class="hljs-comment">//      user_name:that.globalData.user_id</span><br>      <span class="hljs-comment">//    &#125;,</span><br>      <span class="hljs-comment">//    fail: (res) =&gt; &#123;</span><br>      <span class="hljs-comment">//      console.log(&quot;登陆失败&quot;)</span><br>      <span class="hljs-comment">//    &#125;,</span><br>      <span class="hljs-comment">//    method: &quot;GET&quot;,</span><br>      <span class="hljs-comment">//    success: (result) =&gt; &#123;</span><br>      <span class="hljs-comment">//      that.globalData.user_status=result.data</span><br>      <span class="hljs-comment">//      console.log(that.globalData.user_status)</span><br>      <span class="hljs-comment">//    &#125;,</span><br>        <br>      <span class="hljs-comment">//  &#125;)</span><br>       &#125;              <br>       &#125;)<br>  &#125;,<br><br>&#125;)<br><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://api.weixin.qq.com/sns/jscode2session%E6%8E%A5%E5%8F%A3%E5%B0%B1%E6%98%AF%E6%A0%B9%E6%8D%AEcode%E8%AF%B7%E6%B1%82openid%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E4%BB%A3%E7%A0%81%E7%9C%8B%E5%87%BA%EF%BC%8C%E9%9C%80%E8%A6%81%E5%8A%A0%E4%B8%8Aappid%E5%92%8Csecret%EF%BC%8C%E8%BF%99%E4%BA%9B%E4%B8%8A%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E5%AE%98%E7%BD%91%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%9F%A5%E8%AF%A2%E5%88%B0%E3%80%82%E5%85%B6%E4%B8%AD%E4%BB%A3%E7%A0%81%E8%BF%98%E6%B7%BB%E5%8A%A0%E4%BA%86%E5%B0%86%E8%BF%99%E4%BA%9B%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%88%B0%E5%BE%AE%E4%BF%A1%E7%9A%84%E7%BC%93%E5%AD%98%E9%87%8C%EF%BC%8C%E8%BE%BE%E5%88%B0%E6%AF%8F%E6%AC%A1%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E7%9A%84%E6%96%B9%E4%BE%BF%E6%80%A7%E3%80%82">https://api.weixin.qq.com/sns/jscode2session接口就是根据code请求openid，可以根据代码看出，需要加上appid和secret，这些上微信开发官网就可以查询到。其中代码还添加了将这些返回的数据存储到微信的缓存里，达到每次可以调用的方便性。</a><br>可以添加到你的登录界面或者直接放入app.js中</p>]]></content>
    
    
    <categories>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oppenid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git版本回退</title>
    <link href="/2021/07/23/2021-7-24-git%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/"/>
    <url>/2021/07/23/2021-7-24-git%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/</url>
    
    <content type="html"><![CDATA[<p>在实习的过程中，不小心提交了错误的代码到远程分支上，想要删除的时候又不知道如何去删除，所以就去研究了版本回退。</p><span id="more"></span><p>@<a href="%E8%BF%99%E9%87%8C%E5%86%99%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98">TOC</a></p><h1 id="为何要版本回退"><a href="#为何要版本回退" class="headerlink" title="为何要版本回退"></a>为何要版本回退</h1><p>在实习的过程中，不小心提交了错误的代码到远程分支上，想要删除的时候又不知道如何去删除，所以就去研究了版本回退。</p><h1 id="版本回退的办法"><a href="#版本回退的办法" class="headerlink" title="版本回退的办法"></a>版本回退的办法</h1><h2 id="1-reset"><a href="#1-reset" class="headerlink" title="1.reset"></a>1.reset</h2><p>基于reset而言，是这样的操作流程。顺序提交a-b-c<br><img src="https://img-blog.csdnimg.cn/087143b728114a7aa89337fb3f0f8a48.png" alt="在这里插入图片描述"><br>假如在提交c的同时，出现错误代码提交，这时只需要记住b的版本号，直接reset –hard b的版本号，即可将指针回退到b上。<br><img src="https://img-blog.csdnimg.cn/ee92efa041024d238ac1e123dc900045.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-revert"><a href="#2-revert" class="headerlink" title="2.revert"></a>2.revert</h2><p>rever是一种通过类似复制的手段，回退到原始版本。工作流程如下，假如c出现代码错误。<br><img src="https://img-blog.csdnimg.cn/37e3bbd0ac85482abbef3a35dcbdbac5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h1><p>相对reset来说，revert其实是用来解决以下多人合作出现的问题<br><img src="https://img-blog.csdnimg.cn/4b02240660b14b3fafac057905d9943c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是假设你直接reset –hard A的话，分支会退回到A上，那你的同伴敲的代码就没有了，这下你准备收拾东西回家吧。<br>所以采用revert来说，是为了以下原因<br><img src="https://img-blog.csdnimg.cn/b8cec5a17d684947bd3ea190f88dc45b.png" alt="在这里插入图片描述"><br>这样你就可以保存你伙伴的代码了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用git的话，需要清楚有本地分支和远程分支，一般在本地分支执行这些操作，假如远程分支出现错误的话，这时就要更深入研究了。记得在提交代码的时候需要提前pull代码，更新本地代码，假如版本不一致，强制上传代码的危害性是很高的。</p>]]></content>
    
    
    <categories>
      
      <category>版本管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>版本回退 git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sxssfWorkBook</title>
    <link href="/2021/07/23/2021-7-23-sxssfWorkBook/"/>
    <url>/2021/07/23/2021-7-23-sxssfWorkBook/</url>
    
    <content type="html"><![CDATA[<p>今天小编接到了一个任务，就是把数据从数据库取出，然后导出到excel里面。查询一些相应的技术，其实可以看到有三种类型。</p><span id="more"></span><p>@<a href="SXSSFWorkbook%E5%AF%BC%E5%87%BAexcel">TOC</a></p><h1 id="为什么要用SXSSFWorkBook"><a href="#为什么要用SXSSFWorkBook" class="headerlink" title="为什么要用SXSSFWorkBook"></a>为什么要用SXSSFWorkBook</h1><p>今天小编接到了一个任务，就是把数据从数据库取出，然后导出到excel里面。查询一些相应的技术，其实可以看到有三种类型。</p><h2 id="三种类型"><a href="#三种类型" class="headerlink" title="三种类型"></a>三种类型</h2><ul><li><p>HSSFWorkbook   用于Excel2003版及更早版本(扩展名为.xls)的导出。</p></li><li><p>XSSFWorkbook   用于Excel2007版(扩展名为.xlsx)的导出。</p></li><li><p>SXSSFWorkbook<br>相对前面两种，会在导出数据达到万以上的数据，会报内存不足，导致失败的问题，所以用sxssf，简约sf来导出较大数据量</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>此声明：代码引用以下链接，再简单修改自己的实例。</p><blockquote><p>这里是引用地址<br><a href="https://blog.csdn.net/justry_deng/article/details/83005889">https://blog.csdn.net/justry_deng/article/details/83005889</a></p></blockquote><p>引入porm(这里进行了补充)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>30.1.1-jre<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xiaochen.xssh;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;<br><span class="hljs-keyword">import</span> com.google.common.collect.Lists;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Builder;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.*;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.streaming.SXSSFWorkbook;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCellStyle;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFDataFormat;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SxxfWorkbookApplicationTests</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Logger logger = LoggerFactory.getLogger(SxxfWorkbookApplicationTests.class);<br> <br><br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br> <br>    <span class="hljs-comment">// 导出的excel,全文件名</span><br>    <span class="hljs-keyword">final</span> String excelExportDestfilepath = <span class="hljs-string">&quot;C:\\Users\\Desktop\\文件\\abc.xlsx&quot;</span>;<br> <br>        FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>        SXSSFWorkbook sxssfWorkbook = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">long</span> endTime0 = System.currentTimeMillis();<br>            <span class="hljs-comment">//logger.info(&quot;查询数据总耗时:&#123;&#125; 毫秒; list数量为 &#123;&#125;&quot;, endTime0 - startTime0, list.size());</span><br>            Student student1 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen1&quot;</span>).type(<span class="hljs-number">1</span>).ago(<span class="hljs-number">23</span>).build();<br>            Student student2 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen2&quot;</span>).type(<span class="hljs-number">1</span>).ago(<span class="hljs-number">13</span>).build();<br>            Student student3 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen3&quot;</span>).type(<span class="hljs-number">2</span>).ago(<span class="hljs-number">63</span>).build();<br>            Student student4 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen4&quot;</span>).type(<span class="hljs-number">3</span>).ago(<span class="hljs-number">73</span>).build();<br>            Student[] students = <span class="hljs-keyword">new</span> Student[]&#123;student1,student2,student3,student4&#125;;<br>            List&lt;Student&gt; list = Lists.newLinkedList(Arrays.asList(students));<br>            <span class="hljs-comment">/// -&gt; excel到处逻辑</span><br>            <span class="hljs-keyword">long</span> startTime = System.currentTimeMillis();<br>            <span class="hljs-comment">// 获取SXSSFWorkbook实例</span><br>            sxssfWorkbook = <span class="hljs-keyword">new</span> SXSSFWorkbook();<br>            Sheet sheet = sxssfWorkbook.createSheet(<span class="hljs-string">&quot;sheet&quot;</span>);<br><br>            <span class="hljs-comment">// 冻结最左边的两列、冻结最上面的一行</span><br>            <span class="hljs-comment">// 即：滚动横向滚动条时，左边的第一、二列固定不动;滚动纵向滚动条时，上面的第一行固定不动。</span><br>            sheet.createFreezePane(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 设置并获取到需要的样式</span><br>            XSSFCellStyle xssfCellStyleHeader = getAndSetXSSFCellStyleHeader(sxssfWorkbook);<br>            XSSFCellStyle xssfCellStyleOne = getAndSetXSSFCellStyleOne(sxssfWorkbook);<br>            XSSFCellStyle xssfCellStyleTwo = getAndSetXSSFCellStyleTwo(sxssfWorkbook);<br>            <span class="hljs-comment">// 创建第一行,作为header表头 0为第一行</span><br>            org.apache.poi.ss.usermodel.Row header = sheet.createRow(<span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 循环创建header单元格(根据实际情况灵活创建即可)</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> cellnum = <span class="hljs-number">0</span>; cellnum &lt; <span class="hljs-number">6</span>; cellnum++) &#123;<br>                org.apache.poi.ss.usermodel.Cell cell = header.createCell(cellnum);<br>                cell.setCellStyle(xssfCellStyleHeader);<br>                <span class="hljs-comment">// 判断单元格</span><br>                <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">0</span>) &#123;<br>                    cell.setCellValue(<span class="hljs-string">&quot;id&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">1</span>) &#123;<br>                    cell.setCellValue(<span class="hljs-string">&quot;学生姓名&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">2</span>) &#123;<br>                    cell.setCellValue(<span class="hljs-string">&quot;学生年龄&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">3</span>) &#123;<br>                    cell.setCellValue(<span class="hljs-string">&quot;学生姓名&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">4</span>) &#123;<br>                    cell.setCellValue(<span class="hljs-string">&quot;学生生日&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">5</span>) &#123;<br>                    cell.setCellValue(<span class="hljs-string">&quot;学生类型&quot;</span>);<br>                &#125;  <span class="hljs-keyword">else</span> &#123;<br>                    cell.setCellValue(<span class="hljs-string">&quot;结束状态（即挂断原因）&quot;</span>);<br>                &#125;<br>            &#125;<br> <br>            <span class="hljs-comment">// 遍历创建行,导出数据</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> rownum = <span class="hljs-number">1</span>; rownum &lt;= list.size(); rownum++) &#123;<br>                org.apache.poi.ss.usermodel.Row row = sheet.createRow(rownum);<br>                <span class="hljs-comment">// 循环创建单元格</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> cellnum = <span class="hljs-number">0</span>; cellnum &lt; <span class="hljs-number">6</span>; cellnum++) &#123;<br>                    org.apache.poi.ss.usermodel.Cell cell = row.createCell(cellnum);<br>                    <span class="hljs-comment">// 根据行数,设置该行内的单元格样式</span><br>                    <span class="hljs-keyword">if</span> (rownum % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 奇数</span><br>                        cell.setCellStyle(xssfCellStyleOne);<br>                    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 偶数</span><br>                        cell.setCellStyle(xssfCellStyleTwo);<br>                    &#125;<br>                    <span class="hljs-comment">// 根据单元格所属,录入相应内容</span><br>                    <span class="hljs-comment">// 将部分数字类型的字符串,转换为Long;以免导出excel后,单元格左上角有三</span><br>                    <span class="hljs-comment">//    角形(这是excel检查到该单元格内的内容均为数字,但是单元格类型却不是</span><br>                    <span class="hljs-comment">//    数字,给出的提示),转不转看自己需求灵活处理</span><br>                    <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">0</span>) &#123;<br>                        cell.setCellValue((list.get(rownum - <span class="hljs-number">1</span>).getType()));<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">1</span>) &#123;<br>                        cell.setCellValue(list.get(rownum - <span class="hljs-number">1</span>).getName());<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">2</span>) &#123;<br>                        cell.setCellValue(list.get(rownum - <span class="hljs-number">1</span>).getAgo());<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">3</span>) &#123;<br>                        cell.setCellValue(list.get(rownum - <span class="hljs-number">1</span>).getName());<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">4</span>) &#123;<br>                        cell.setCellValue(list.get(rownum - <span class="hljs-number">1</span>).getBirthday());<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellnum == <span class="hljs-number">5</span>) &#123;<br>                        cell.setCellValue(list.get(rownum - <span class="hljs-number">1</span>).getType());<br>                    &#125;  <span class="hljs-keyword">else</span> &#123;<br>                        cell.setCellValue(Long.parseLong(list.get(rownum - <span class="hljs-number">1</span>).getName()));<br> <br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 在后面设置sheet</span><br>            setSheet(sheet);<br>            fos = <span class="hljs-keyword">new</span> FileOutputStream(excelExportDestfilepath);<br>            sxssfWorkbook.write(fos);<br>            <span class="hljs-keyword">long</span> endTime = System.currentTimeMillis();<br>            logger.info(<span class="hljs-string">&quot;数据全部导出至excel总耗时:&#123;&#125; 毫秒!&quot;</span>, endTime - startTime, list.size());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;发生异常咯！&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(sxssfWorkbook != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-comment">// dispose of temporary files backing this workbook on disk -&gt; 处</span><br>                    <span class="hljs-comment">//     理SXSSFWorkbook导出excel时，产生的临时文件</span><br>                    sxssfWorkbook.dispose();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(fos != <span class="hljs-keyword">null</span>) &#123;<br>                    fos.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br> <br>        &#125;<br>    &#125;<br> <br> <br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置sheet</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSheet</span><span class="hljs-params">(Sheet sheet)</span> </span>&#123;<br>        <span class="hljs-comment">// 设置各列宽度(单位为:字符宽度的1/256)</span><br>        sheet.setColumnWidth(<span class="hljs-number">0</span>, <span class="hljs-number">32</span> * <span class="hljs-number">256</span>);<br>        sheet.setColumnWidth(<span class="hljs-number">1</span>, <span class="hljs-number">32</span> * <span class="hljs-number">256</span>);<br>        sheet.setColumnWidth(<span class="hljs-number">2</span>, <span class="hljs-number">20</span> * <span class="hljs-number">256</span>);<br>        sheet.setColumnWidth(<span class="hljs-number">3</span>, <span class="hljs-number">20</span> * <span class="hljs-number">256</span>);<br>        sheet.setColumnWidth(<span class="hljs-number">4</span>, <span class="hljs-number">20</span> * <span class="hljs-number">256</span>);<br>        sheet.setColumnWidth(<span class="hljs-number">5</span>, <span class="hljs-number">20</span> * <span class="hljs-number">256</span>);<br>        sheet.setColumnWidth(<span class="hljs-number">6</span>, <span class="hljs-number">20</span> * <span class="hljs-number">256</span>);<br>        sheet.setColumnWidth(<span class="hljs-number">7</span>, <span class="hljs-number">20</span> * <span class="hljs-number">256</span>);<br>        sheet.setColumnWidth(<span class="hljs-number">8</span>, <span class="hljs-number">20</span> * <span class="hljs-number">256</span>);<br>        sheet.setColumnWidth(<span class="hljs-number">9</span>, <span class="hljs-number">20</span> * <span class="hljs-number">256</span>);<br>        sheet.setColumnWidth(<span class="hljs-number">10</span>, <span class="hljs-number">32</span> * <span class="hljs-number">256</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取并设置header样式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> XSSFCellStyle <span class="hljs-title">getAndSetXSSFCellStyleHeader</span><span class="hljs-params">(SXSSFWorkbook sxssfWorkbook)</span> </span>&#123;<br>        XSSFCellStyle xssfCellStyle = (XSSFCellStyle) sxssfWorkbook.createCellStyle();<br>        Font font = sxssfWorkbook.createFont();<br>        <span class="hljs-comment">// 字体大小</span><br>        font.setFontHeightInPoints((<span class="hljs-keyword">short</span>) <span class="hljs-number">14</span>);<br>        <span class="hljs-comment">// 字体粗细</span><br>        font.setBoldweight((<span class="hljs-keyword">short</span>) <span class="hljs-number">20</span>);<br>        <span class="hljs-comment">// 将字体应用到样式上面</span><br>        xssfCellStyle.setFont(font);<br>        <span class="hljs-comment">// 是否自动换行</span><br>        xssfCellStyle.setWrapText(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">// 水平居中</span><br>        xssfCellStyle.setAlignment(HorizontalAlignment.CENTER);<br>        <span class="hljs-comment">// 垂直居中</span><br>        xssfCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);<br>        <span class="hljs-keyword">return</span> xssfCellStyle;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取并设置样式一</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> XSSFCellStyle <span class="hljs-title">getAndSetXSSFCellStyleOne</span><span class="hljs-params">(SXSSFWorkbook sxssfWorkbook)</span> </span>&#123;<br>        XSSFCellStyle xssfCellStyle = (XSSFCellStyle) sxssfWorkbook.createCellStyle();<br>        XSSFDataFormat format = (XSSFDataFormat)sxssfWorkbook.createDataFormat();<br>        <span class="hljs-comment">// 是否自动换行</span><br>        xssfCellStyle.setWrapText(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">// 水平居中</span><br>        xssfCellStyle.setAlignment(HorizontalAlignment.CENTER);<br>        <span class="hljs-comment">// 垂直居中</span><br>        xssfCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);<br>        <span class="hljs-comment">// 前景颜色</span><br>        xssfCellStyle.setFillPattern(XSSFCellStyle.SOLID_FOREGROUND);<br>        xssfCellStyle.setFillForegroundColor(IndexedColors.AQUA.getIndex());<br>        <span class="hljs-comment">// 边框</span><br>        xssfCellStyle.setBorderBottom(BorderStyle.THIN);<br>        xssfCellStyle.setBorderRight(BorderStyle.THIN);<br>        xssfCellStyle.setBorderTop(BorderStyle.THIN);<br>        xssfCellStyle.setBorderLeft(BorderStyle.THIN);<br>        xssfCellStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());<br>        xssfCellStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());<br>        xssfCellStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());<br>        xssfCellStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());<br>        <span class="hljs-comment">// 防止数字过长,excel导出后,显示为科学计数法,如:防止8615192053888被显示为8.61519E+12</span><br>        xssfCellStyle.setDataFormat(format.getFormat(<span class="hljs-string">&quot;0&quot;</span>));<br>        <span class="hljs-keyword">return</span> xssfCellStyle;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取并设置样式二</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> XSSFCellStyle <span class="hljs-title">getAndSetXSSFCellStyleTwo</span><span class="hljs-params">(SXSSFWorkbook sxssfWorkbook)</span> </span>&#123;<br>        XSSFCellStyle xssfCellStyle = (XSSFCellStyle) sxssfWorkbook.createCellStyle();<br>        XSSFDataFormat format = (XSSFDataFormat)sxssfWorkbook.createDataFormat();<br>        <span class="hljs-comment">// 是否自动换行</span><br>        xssfCellStyle.setWrapText(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">// 水平居中</span><br>        xssfCellStyle.setAlignment(HorizontalAlignment.CENTER);<br>        <span class="hljs-comment">// 边框</span><br>        xssfCellStyle.setBorderBottom(BorderStyle.THIN);<br>        xssfCellStyle.setBorderRight(BorderStyle.THIN);<br>        xssfCellStyle.setBorderTop(BorderStyle.THIN);<br>        xssfCellStyle.setBorderLeft(BorderStyle.THIN);<br>        xssfCellStyle.setBottomBorderColor(IndexedColors.BLACK.getIndex());<br>        xssfCellStyle.setRightBorderColor(IndexedColors.BLACK.getIndex());<br>        xssfCellStyle.setTopBorderColor(IndexedColors.BLACK.getIndex());<br>        xssfCellStyle.setLeftBorderColor(IndexedColors.BLACK.getIndex());<br>        <span class="hljs-comment">// 垂直居中</span><br>        xssfCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);<br>        <span class="hljs-comment">// 防止数字过长,excel导出后,显示为科学计数法,如:防止8615192053888被显示为8.61519E+12</span><br>        xssfCellStyle.setDataFormat(format.getFormat(<span class="hljs-string">&quot;0&quot;</span>));<br>        <span class="hljs-keyword">return</span> xssfCellStyle;<br>    &#125;<br> <br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer type;<br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> Integer ago;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结归纳"><a href="#总结归纳" class="headerlink" title="总结归纳"></a>总结归纳</h1><p>用一张图来阐述<br><img src="https://img-blog.csdnimg.cn/4e3fd53f65bc4f0cb1dcf8f0b47fa7d3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>具体样式看实例代码，样式什么的用到的时候网上查即可，不需要去详细记忆，毕竟这是工具类。只需要大概的架构即可。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sxssfWorkBook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java.stream</title>
    <link href="/2021/07/22/2021-7-22-java-stream/"/>
    <url>/2021/07/22/2021-7-22-java-stream/</url>
    
    <content type="html"><![CDATA[<p>简介：java.stream流，是java8的新特性，封装了对集合的操作、null指针的解决、以及函数式接口带来的方便，本文来讲解一下自己常用的java.stream流。</p><span id="more"></span><h2 id="stream的分类"><a href="#stream的分类" class="headerlink" title="stream的分类"></a>stream的分类</h2><p>集合分类有两个方法来生成流：</p><ul><li>stream() - 为集合创建串行流</li><li>parallelStream() - 为集合创建并行流</li></ul><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul><li>commsumer</li></ul><p>​<br>​    @FunctionalInterface<br>​    public interface Consumer<T> {<br>​    /**<br>​     * Performs this operation on the given argument.<br>​     *<br>​     * @param t the input argument<br>​     <em>/<br>​    void accept(T t);<br>​<br>    /</em>*<br>     * Returns a composed {@code Consumer} that performs, in sequence, this<br>     * operation followed by the {@code after} operation. If performing either<br>     * operation throws an exception, it is relayed to the caller of the<br>     * composed operation.  If performing this operation throws an exception,<br>     * the {@code after} operation will not be performed.<br>     *<br>     * @param after the operation to perform after this operation<br>     * @return a composed {@code Consumer} that performs in sequence this<br>     * operation followed by the {@code after} operation<br>     * @throws NullPointerException if {@code after} is null<br>     */<br>    default Consumer<T> andThen(Consumer&lt;? super T&gt; after) {<br>        Objects.requireNonNull(after);<br>        return (T t) -&gt; { accept(t); after.accept(t); };<br>    }<br>    }</p><ul><li>predicate</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="hljs-comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> java.util.function;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Represents a predicate (boolean-valued function) of one argument.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class="hljs-comment"> * whose functional method is &#123;<span class="hljs-doctag">@link</span> #test(Object)&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; the type of the input to the predicate</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Predicate</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Evaluates this predicate on the given argument.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> t the input argument</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if the input argument matches the predicate,</span><br><span class="hljs-comment">     * otherwise &#123;<span class="hljs-doctag">@code</span> false&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(T t)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns a composed predicate that represents a short-circuiting logical</span><br><span class="hljs-comment">     * AND of this predicate and another.  When evaluating the composed</span><br><span class="hljs-comment">     * predicate, if this predicate is &#123;<span class="hljs-doctag">@code</span> false&#125;, then the &#123;<span class="hljs-doctag">@code</span> other&#125;</span><br><span class="hljs-comment">     * predicate is not evaluated.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed</span><br><span class="hljs-comment">     * to the caller; if evaluation of this predicate throws an exception, the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> other&#125; predicate will not be evaluated.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> other a predicate that will be logically-ANDed with this</span><br><span class="hljs-comment">     *              predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a composed predicate that represents the short-circuiting logical</span><br><span class="hljs-comment">     * AND of this predicate and the &#123;<span class="hljs-doctag">@code</span> other&#125; predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException if other is null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Predicate&lt;T&gt; <span class="hljs-title">and</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-keyword">super</span> T&gt; other)</span> </span>&#123;<br>        Objects.requireNonNull(other);<br>        <span class="hljs-keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns a predicate that represents the logical negation of this</span><br><span class="hljs-comment">     * predicate.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a predicate that represents the logical negation of this</span><br><span class="hljs-comment">     * predicate</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Predicate&lt;T&gt; <span class="hljs-title">negate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (t) -&gt; !test(t);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns a composed predicate that represents a short-circuiting logical</span><br><span class="hljs-comment">     * OR of this predicate and another.  When evaluating the composed</span><br><span class="hljs-comment">     * predicate, if this predicate is &#123;<span class="hljs-doctag">@code</span> true&#125;, then the &#123;<span class="hljs-doctag">@code</span> other&#125;</span><br><span class="hljs-comment">     * predicate is not evaluated.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;Any exceptions thrown during evaluation of either predicate are relayed</span><br><span class="hljs-comment">     * to the caller; if evaluation of this predicate throws an exception, the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> other&#125; predicate will not be evaluated.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> other a predicate that will be logically-ORed with this</span><br><span class="hljs-comment">     *              predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a composed predicate that represents the short-circuiting logical</span><br><span class="hljs-comment">     * OR of this predicate and the &#123;<span class="hljs-doctag">@code</span> other&#125; predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException if other is null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> Predicate&lt;T&gt; <span class="hljs-title">or</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-keyword">super</span> T&gt; other)</span> </span>&#123;<br>        Objects.requireNonNull(other);<br>        <span class="hljs-keyword">return</span> (t) -&gt; test(t) || other.test(t);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns a predicate that tests if two arguments are equal according</span><br><span class="hljs-comment">     * to &#123;<span class="hljs-doctag">@link</span> Objects#equals(Object, Object)&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; the type of arguments to the predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> targetRef the object reference with which to compare for equality,</span><br><span class="hljs-comment">     *               which may be &#123;<span class="hljs-doctag">@code</span> null&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a predicate that tests if two arguments are equal according</span><br><span class="hljs-comment">     * to &#123;<span class="hljs-doctag">@link</span> Objects#equals(Object, Object)&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Predicate&lt;T&gt; <span class="hljs-title">isEqual</span><span class="hljs-params">(Object targetRef)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">null</span> == targetRef)<br>                ? Objects::isNull<br>                : object -&gt; targetRef.equals(object);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>Function</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="hljs-comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> java.util.function;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Represents a function that accepts one argument and produces a result.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class="hljs-comment"> * whose functional method is &#123;<span class="hljs-doctag">@link</span> #apply(Object)&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; the type of the input to the function</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;R&gt; the type of the result of the function</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Function</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">R</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Applies this function to the given argument.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> t the function argument</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the function result</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">R <span class="hljs-title">apply</span><span class="hljs-params">(T t)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns a composed function that first applies the &#123;<span class="hljs-doctag">@code</span> before&#125;</span><br><span class="hljs-comment">     * function to its input, and then applies this function to the result.</span><br><span class="hljs-comment">     * If evaluation of either function throws an exception, it is relayed to</span><br><span class="hljs-comment">     * the caller of the composed function.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt; the type of input to the &#123;<span class="hljs-doctag">@code</span> before&#125; function, and to the</span><br><span class="hljs-comment">     *           composed function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> before the function to apply before this function is applied</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a composed function that first applies the &#123;<span class="hljs-doctag">@code</span> before&#125;</span><br><span class="hljs-comment">     * function and then applies this function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException if before is null</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #andThen(Function)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">default</span> &lt;V&gt; <span class="hljs-function">Function&lt;V, R&gt; <span class="hljs-title">compose</span><span class="hljs-params">(Function&lt;? <span class="hljs-keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;<br>        Objects.requireNonNull(before);<br>        <span class="hljs-keyword">return</span> (V v) -&gt; apply(before.apply(v));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns a composed function that first applies this function to</span><br><span class="hljs-comment">     * its input, and then applies the &#123;<span class="hljs-doctag">@code</span> after&#125; function to the result.</span><br><span class="hljs-comment">     * If evaluation of either function throws an exception, it is relayed to</span><br><span class="hljs-comment">     * the caller of the composed function.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt; the type of output of the &#123;<span class="hljs-doctag">@code</span> after&#125; function, and of the</span><br><span class="hljs-comment">     *           composed function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> after the function to apply after this function is applied</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a composed function that first applies this function and then</span><br><span class="hljs-comment">     * applies the &#123;<span class="hljs-doctag">@code</span> after&#125; function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException if after is null</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #compose(Function)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">default</span> &lt;V&gt; <span class="hljs-function">Function&lt;T, V&gt; <span class="hljs-title">andThen</span><span class="hljs-params">(Function&lt;? <span class="hljs-keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;<br>        Objects.requireNonNull(after);<br>        <span class="hljs-keyword">return</span> (T t) -&gt; after.apply(apply(t));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns a function that always returns its input argument.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; the type of the input and output objects to the function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a function that always returns its input argument</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Function&lt;T, T&gt; <span class="hljs-title">identity</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> t -&gt; t;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>supplier</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="hljs-comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> java.util.function;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Represents a supplier of results.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;There is no requirement that a new or distinct result be returned each</span><br><span class="hljs-comment"> * time the supplier is invoked.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class="hljs-comment"> * whose functional method is &#123;<span class="hljs-doctag">@link</span> #get()&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; the type of results supplied by this supplier</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Supplier</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Gets a result.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a result</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">T <span class="hljs-title">get</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="stream的方法"><a href="#stream的方法" class="headerlink" title="stream的方法"></a>stream的方法</h2><ol><li>操作</li></ol><ul><li><strong>map</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] numbers = <span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">22</span>,<span class="hljs-number">34</span>,<span class="hljs-number">4</span>,<span class="hljs-number">56</span>&#125;;<br>List&lt;Integer&gt; numberList = Lists.newArrayList(numbers);<br>List&lt;Integer&gt; streamList = numberList.stream().map(s -&gt; s + <span class="hljs-number">1</span>).collect(Collectors.toList());<br>streamList.forEach(System.out::println);<br>        <span class="hljs-comment">// 映射</span><br>Student student1 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen1&quot;</span>).type(<span class="hljs-number">1</span>).ago(<span class="hljs-number">23</span>).build();<br>Student student2 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen2&quot;</span>).type(<span class="hljs-number">1</span>).ago(<span class="hljs-number">13</span>).build();<br>Student student3 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen3&quot;</span>).type(<span class="hljs-number">2</span>).ago(<span class="hljs-number">63</span>).build();<br>Student student4 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen4&quot;</span>).type(<span class="hljs-number">3</span>).ago(<span class="hljs-number">73</span>).build();<br>Student[] students = <span class="hljs-keyword">new</span> Student[]&#123;student1,student2,student3,student4&#125;;<br>List&lt;Student&gt; studentList = Lists.newLinkedList(Arrays.asList(students));<br>List&lt;String&gt; collect = studentList.stream().map(Student::getName).collect(Collectors.toList());<br>collect.forEach(System.out::println);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fc118ad27a5947358888d4d701bee4bd.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f9f2174d8103400f99fa49a918927dc5.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 映射</span><br>Student student1 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen1&quot;</span>).type(<span class="hljs-number">1</span>).ago(<span class="hljs-number">23</span>).build();<br>Student student2 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen2&quot;</span>).type(<span class="hljs-number">1</span>).ago(<span class="hljs-number">13</span>).build();<br>Student student3 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen3&quot;</span>).type(<span class="hljs-number">2</span>).ago(<span class="hljs-number">63</span>).build();<br>Student student4 = Student.builder().birthday(<span class="hljs-keyword">new</span> Date()).name(<span class="hljs-string">&quot;chen4&quot;</span>).type(<span class="hljs-number">3</span>).ago(<span class="hljs-number">73</span>).build();<br>Student[] students = <span class="hljs-keyword">new</span> Student[]&#123;student1,student2,student3,student4&#125;;<br>List&lt;Student&gt; studentList = Lists.newLinkedList(Arrays.asList(students));<br>List&lt;String&gt; collect = studentList.stream().map(Student::getName).collect(Collectors.toList());<br>collect.forEach(System.out::println);<br><br>System.out.println(<span class="hljs-string">&quot;============================================================&quot;</span>);<br>List&lt;Student&gt; sortStudentList = studentList.stream().sorted(Comparator.comparing(Student::getAgo)).collect(Collectors.toList());<br>List&lt;Student&gt; ascStudentList = studentList.stream().sorted(Comparator.comparing(Student::getAgo).reversed()).collect(Collectors.toList());<br><br>sortStudentList.forEach(System.out::println);<br>ascStudentList.forEach(System.out::println);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d3b0957dfd0b4604b1e72adf2617b74d.png" alt="在这里插入图片描述"></p><ul><li><strong>sort</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 排序</span><br>List&lt;Integer&gt; sortList = numberList.stream().sorted().collect(Collectors.toList());<br>sortList.forEach(System.out::println);<br>System.out.println(<span class="hljs-string">&quot;============================================================&quot;</span>);<br><span class="hljs-comment">// 逆序</span><br>List&lt;Integer&gt; ascSortList = numberList.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());<br>ascSortList.forEach(System.out::println);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9217846a46924f859e2c6ec4af30b00d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>group</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 直接以對象分組</span><br>Map&lt;Integer, List&lt;Student&gt;&gt; listMap = studentList.stream().collect(Collectors.groupingBy(Student::getType));<br><span class="hljs-comment">// 键值对自己拟定</span><br>Map&lt;Integer, String&gt; collect1 = studentList.stream().collect(Collectors.toMap(Student::getType, Student::getName, (s1, s2) -&gt; s1));<br><br></code></pre></td></tr></table></figure><p>filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;============================================================&quot;</span>);<br>List&lt;Student&gt; studentList1 = studentList.stream().filter(s1 -&gt; s1.getType() == <span class="hljs-number">1</span>).collect(Collectors.toList());<br><span class="hljs-keyword">for</span> (Student student : studentList1) &#123;<br>    System.out.println(student.getName());<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d05160c3a1564dee9f2b142a66841187.png" alt="在这里插入图片描述"></p><p>  2.结合</p><p><strong>collect</strong><br>上面都展示了collect，是一个汇聚，可以汇聚成list、set、map等类型<br><strong>count</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> count = studentList.stream().count();<br>   System.out.println(count);<br></code></pre></td></tr></table></figure><h2 id="optional"><a href="#optional" class="headerlink" title="optional"></a>optional</h2><p>optional类是对null的对象进行友好的判断，根据optional自带的方法都有很好的防止空指针异常的友好控制</p><ul><li>optional操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Student student = <span class="hljs-keyword">null</span>;<br>Optional&lt;Student&gt; studentOptional = Optional.ofNullable(student);<br><span class="hljs-comment">// 已经抛出异常了</span><br>Optional&lt;Student&gt; studentOptional1 = Optional.of(student);<br><span class="hljs-keyword">boolean</span> present = studentOptional.isPresent();<br><span class="hljs-keyword">boolean</span> present1 = studentOptional1.isPresent();<br>System.out.println(<span class="hljs-string">&quot;&quot;</span>+present+present1);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2dbb082e7aac4bb095b2fea3a139ed44.png" alt="在这里插入图片描述"><br>明显看出 Optional中的ofNullable()方法 可以接受null的对象，而of方法不能接受null方法的对象，以下为源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns an &#123;<span class="hljs-doctag">@code</span> Optional&#125; describing the specified value, if non-null,</span><br><span class="hljs-comment">     * otherwise returns an empty &#123;<span class="hljs-doctag">@code</span> Optional&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; the class of the value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value the possibly-null value to describe</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an &#123;<span class="hljs-doctag">@code</span> Optional&#125; with a present value if the specified value</span><br><span class="hljs-comment">     * is non-null, otherwise an empty &#123;<span class="hljs-doctag">@code</span> Optional&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Optional&lt;T&gt; <span class="hljs-title">ofNullable</span><span class="hljs-params">(T value)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> value == <span class="hljs-keyword">null</span> ? empty() : of(value);<br>    &#125;<br></code></pre></td></tr></table></figure><p>看得出，先判断是否为空，空则返回empty（）非空时调用of（）方法</p><ul><li>optional方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;chen&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> Date(),<span class="hljs-number">12</span>);<br>Optional&lt;Student&gt; studentOptional = Optional.ofNullable(student);<br><span class="hljs-keyword">boolean</span> present = studentOptional.isPresent();<br>System.out.println(present);<br>studentOptional.ifPresent(s1 -&gt; s1.setName(<span class="hljs-string">&quot;chen2&quot;</span>));<br>Student student5 = studentOptional.get();<br>System.out.println(student5.toString());<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/59972dad40d64052ae836a0552f5d26a.png" alt="在这里插入图片描述"><br>看得出其实ofNullable传入对象时，可以用isPresent（）方法进行判断是否为null对象，而ifPresent()则是对对象进行判断，非空时传入消费者函数时接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ifPresent</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-keyword">super</span> T&gt; consumer)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-keyword">null</span>)<br>        consumer.accept(value);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stream流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Objects.equals、CollectionUtils.isEmpty、java工具类</title>
    <link href="/2021/07/20/2021-7-20-java/"/>
    <url>/2021/07/20/2021-7-20-java/</url>
    
    <content type="html"><![CDATA[<p>今天探讨一下，equals和Objects.equals。为什么会提到这个呢？原因是在实习的过程中遇过编码中很少使用equals去做比较，而是大量采用Objects.equals，其实目的是基于减少null指针错误的出现。一般编码中，会考虑到很多方面，大多是对一个获取数据对象等进行判断空对象的存在。</p><span id="more"></span><h1 id="equals与Objects-equals的区别"><a href="#equals与Objects-equals的区别" class="headerlink" title="equals与Objects.equals的区别"></a>equals与Objects.equals的区别</h1><ul><li><p>a.equals(b),当a出现null时，编译器会直接报null指针异常，而当b等于null，a不等于null时，会返回false，这样的情况下，当a出现null时直接报错而不直接运行后面代码，</p></li><li><p>当你判断两个都为非空时，就可以用Objects.equals(a,b),这种情况下，当a与b都等于null时，会返回true的，而当一个为null时，会返回false</p></li><li><p>两种情况而言，objects.equals更好了防止null指针对程序出错的异常，通常情况下，都会去编写一个检验类，去检验可能出现null指针异常的返回数据类型，类似从数据库查询出来的情况下，要考虑空数据的情况，和对一些dto而言，也要考虑null指针，特别是对集合而言,用一下工具类去判断。</p></li><li><p>附源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">* <span class="hljs-meta">@since</span> <span class="hljs-number">1.7</span><br> */<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Objects</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Objects</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AssertionError(<span class="hljs-string">&quot;No java.util.Objects instances for you!&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns &#123;<span class="hljs-doctag">@code</span> true&#125; if the arguments are equal to each other</span><br><span class="hljs-comment">     * and &#123;<span class="hljs-doctag">@code</span> false&#125; otherwise.</span><br><span class="hljs-comment">     * Consequently, if both arguments are &#123;<span class="hljs-doctag">@code</span> null&#125;, &#123;<span class="hljs-doctag">@code</span> true&#125;</span><br><span class="hljs-comment">     * is returned and if exactly one argument is &#123;<span class="hljs-doctag">@code</span> null&#125;, &#123;<span class="hljs-doctag">@code</span></span><br><span class="hljs-comment">     * false&#125; is returned.  Otherwise, equality is determined by using</span><br><span class="hljs-comment">     * the &#123;<span class="hljs-doctag">@link</span> Object#equals equals&#125; method of the first</span><br><span class="hljs-comment">     * argument.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a an object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b an object to be compared with &#123;<span class="hljs-doctag">@code</span> a&#125; for equality</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if the arguments are equal to each other</span><br><span class="hljs-comment">     * and &#123;<span class="hljs-doctag">@code</span> false&#125; otherwise</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> Object#equals(Object)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object a, Object b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (a == b) || (a != <span class="hljs-keyword">null</span> &amp;&amp; a.equals(b));<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="CollectionUtils-isEmpty"><a href="#CollectionUtils-isEmpty" class="headerlink" title="CollectionUtils.isEmpty"></a>CollectionUtils.isEmpty</h1><ul><li><p>CollectionUtils是对集合的一个包装工具类，里面富含了好多方法，在对数据库查询出来的实体类，封装为dto之后，需要对集合类型的数据进行获取进行判断，防止null指针之后对集合进行其余操作而产生的报错。</p></li><li><p>CollectionUtils.isEmpty(),使用该工具类对集合进行空判断，为了防止之后对集合进行操作时报null指针的异常。</p></li><li><p>附源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(Collection coll)</span> </span>&#123;<br>     <span class="hljs-keyword">return</span> coll == <span class="hljs-keyword">null</span> || coll.isEmpty();<br> &#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="java工具类"><a href="#java工具类" class="headerlink" title="java工具类"></a>java工具类</h1><ol><li><p>String.format(字符串,参数)</p><p>该类的跟python的字符串映射很像，可以用[%s]替代相应的参数，达到拼接字符串的效果。</p><table><thead><tr><th>格式化字符串</th><th></th></tr></thead><tbody><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>整数类型（十进制）</td></tr><tr><td>%f</td><td>浮点类型</td></tr></tbody></table></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea方便使用</title>
    <link href="/2021/07/07/2021-7-7-idea/"/>
    <url>/2021/07/07/2021-7-7-idea/</url>
    
    <content type="html"><![CDATA[<p>现在基本idea是主流了，所以对此idea而言，还有很多快捷键和插件可以帮助自己能够更加顺应开发速度。此文来记录自己常用的插件和快捷键。</p><span id="more"></span><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>ctrl + shift + f</td><td>快速查找全路径下的（全局），支持过滤操作（windwos10下的热键会冲突，所以需要更改。）</td></tr><tr><td>ctrl + shift + r</td><td>快速查找全路径下的符合信息，并支持替换</td></tr><tr><td>双击shift</td><td>也是全局搜索的一种</td></tr><tr><td>ctrl+shift+[</td><td>切换项目窗口，对多项目分布式有很好的操作</td></tr><tr><td>ctrl+alt +b</td><td>跳过接口方法，快速进入实现类</td></tr><tr><td>ctrl+alt +鼠标左键</td><td>跳过接口方法，快速进入实现类</td></tr><tr><td>ctrl+alt+方向左键</td><td>退回点击上一个步骤，方便快捷</td></tr></tbody></table><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><table><thead><tr><th>lombok</th><th>有些项目默认装置的lombok，所以装插件很有好处</th></tr></thead><tbody><tr><td>tralcation</td><td>翻译插件，鼠标左键翻译即可</td></tr><tr><td>Lombok</td><td>lombok的插件简单便捷</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>因为时常用到debug，所以这次来简单说明一下这栏的快捷键</p><p><img src="https://img-blog.csdnimg.cn/img_convert/634728c1a2c1490632bc50faf4c159a4.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/img_convert/a5b4fce0f86f832aca9e8a470e39f365.png" alt="在这里插入图片描述"></p><p>第一个：是跳转到你断点的位置 alt + f10(因idea版本和个人设置不同，快捷键不同， 所以不加阐述)</p><p>第二个：是进行下一步骤，不进入方法 </p><p>第三个：进入方法内，该方法为你自己定义的方法</p><p>第四个：进入方法内，一些底层包也会进入（比较深沉，除非研究源码，一般用不到）</p><p>第五个：跳出方法</p><p>第六个：还没用过</p><p>左下方的是断点，和结束。</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ol><li>按键11标识代码</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/be8c2390cfbc2861cf7736d4252c39e2.png" alt="在这里插入图片描述"></p><p>favorites即可快速跳转标记的内容</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0dc07b03da4cd4c8eed872b25deb883e.png" alt="在这里插入图片描述"></p><p>2.邮件annotate可以查看分支</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>未完，待续</p><p>更新于 2021/7/21</p>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>了解postman的简单使用</title>
    <link href="/2021/07/07/2021-7-7-postman/"/>
    <url>/2021/07/07/2021-7-7-postman/</url>
    
    <content type="html"><![CDATA[<p>简单探讨一下利用postman测试需要登陆的接口</p><span id="more"></span><h3 id="get和post的请求的不同"><a href="#get和post的请求的不同" class="headerlink" title="get和post的请求的不同"></a>get和post的请求的不同</h3><ol><li><p>get</p><p>只能进行parm进行传参数，不允许利用请求体去请求，重要的是@RequestParm 是基于参数的，不允许一个请求体。</p></li><li><p>post</p><p>这种参数和表单数据都可以进行请求。</p></li></ol><h3 id="需要登陆请求的解决方法"><a href="#需要登陆请求的解决方法" class="headerlink" title="需要登陆请求的解决方法"></a>需要登陆请求的解决方法</h3><ol><li><p>​    首先要了解，登录后会给服务传什么值，一般会存在cookier或者存在请求头上。一般为Authorization 这样的key值，通过请求头添加即可</p></li><li><p>post请求下的@RequestBody的传送方式，不用改为json数据， 因为@RequestBody本身封装了json，只需要传送json格式的数据即可，list就是数据[],对象就是{}即可。</p></li></ol><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>需要在environments里配置相应的全局变量，直接在请求体上配置</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般要绕过请求，则进行登陆后查看请求头或者cookie，附带相应的值即可。</p>]]></content>
    
    
    <categories>
      
      <category>测试工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postman</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单了解maven</title>
    <link href="/2021/07/06/2021-7-6-maven/"/>
    <url>/2021/07/06/2021-7-6-maven/</url>
    
    <content type="html"><![CDATA[<p>简单了解maven相关的一些操作</p><span id="more"></span><h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>今天在运用maven的时候，出现了有些jar包无法下载。自己琢磨不透，所以请教了导师，导师说你可以在别的项目里通过搜索相同的jar包名称，利用idea的快捷键 ctrl+shift+f 来查找具体在哪个项目用到jar包，再利用maven进行install。</p><h1 id="maven的操作"><a href="#maven的操作" class="headerlink" title="maven的操作"></a>maven的操作</h1><ol><li><p>install</p><p>指的是将这里的jar包依赖下载到本地。之后本地新建项目等都不会再获取远程仓库，而利用本地仓库。</p></li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>版本管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React核心概念</title>
    <link href="/2021/06/26/2021-6-26-React-base/"/>
    <url>/2021/06/26/2021-6-26-React-base/</url>
    
    <content type="html"><![CDATA[<p>新学习方式学习React</p><span id="more"></span><p>@<a href="React">TOC</a></p><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="为何要学React？"><a href="#为何要学React？" class="headerlink" title="为何要学React？"></a>为何要学React？</h2><blockquote><pre><code>1.首先因为之前学习过Vue，也体验到Vue框架的便捷，这是基于实时的渲染效果。2.至于React，有听过Vue的框架自然也听过React，作为前端框架的两大巨头，也要简单了解过，方便以后更换技术不再花很多时间去学习基础。附加react官网</code></pre></blockquote><pre><code> [React官网](https://reactjs.bootcss.com/docs/code-splitting.html)</code></pre><h2 id="怎么学习呢？"><a href="#怎么学习呢？" class="headerlink" title="怎么学习呢？"></a>怎么学习呢？</h2><p>  早期，学习编程基本都是看视频，跟着视频慢慢琢磨。后来接触博客学习之后，本次将采取新的学习方式，看官方文档学习，刚好官方文档有小游戏的实践，先总体浏览React的总体框架，之后再编写代码，然后用博客进行总结归纳。至于视频学习只基于有些看不懂的点，这样一来可能会减少学习时间。</p><h1 id="2-JSX"><a href="#2-JSX" class="headerlink" title="2.JSX"></a>2.JSX</h1><p>其实也不是什么玩意，就像一种翻译语言一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><p>这种有参数，有html代码的写法就是jsx。<br>套用模板</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> element = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">modelName</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="3-元素渲染"><a href="#3-元素渲染" class="headerlink" title="3.元素渲染"></a>3.元素渲染</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ReactDOM.render(<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Game</span> /&gt;</span></span>,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>以上就是元素渲染，通过ReactDom 的render方法来将渲染元素与html文本标签的元素进行绑定.而vue则是利用直接嵌套在html文本。两者还是有区别的。</p><h1 id="4-组件"><a href="#4-组件" class="headerlink" title="4.组件"></a>4.组件</h1><p>组件在学习Vue其实并不陌生，React也是基于组件的，实现组件方法目前有两种方式。一种是无构造函数的组件，一种是可有可无构造函数组件。</p><ol><li>函数式，无构造函数，这种只是方便撰写<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Game</span>(<span class="hljs-params">props</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>我是个按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>默认组件，这种比较复杂点，但是可以添加很多函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Game</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br><span class="hljs-comment">//可有可无构造函数，与java类似，你懂的！！</span><br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span>(<br><span class="hljs-comment">// 模板</span><br>) <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="5-props"><a href="#5-props" class="headerlink" title="5.props"></a>5.props</h1><p>props全称为properties，就是参数列表，一般为父组件传给子组件的参数，跟vue的类似。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Game</span>(<span class="hljs-params">props</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <br><span class="hljs-comment">// 这里的value是由父组件传给子组件的参数</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>&#123;props.value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-state"><a href="#6-state" class="headerlink" title="6.state"></a>6.state</h1><p>这个是组件的私有属性，就是vue实例对象中的data一样道理。但是不同的是，在调用构造函数初始化的时候，比vue复杂一点，就是要使用super（props）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Game</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>      <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>          <span class="hljs-built_in">super</span>(props);<br>          <span class="hljs-built_in">this</span>.state = &#123;<br>             <span class="hljs-comment">// 这里添加初始参数</span><br>              <span class="hljs-attr">xIsNext</span>: <span class="hljs-literal">true</span>,<br>          &#125;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后要更改参数时，在同一组件下，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">利用<span class="hljs-built_in">this</span>.state.xIsNext调用<br>用<span class="hljs-built_in">this</span>.setStates(&#123;<span class="hljs-attr">xIsNext</span>:<span class="hljs-string">&quot;&quot;</span>&#125;)更改<br></code></pre></td></tr></table></figure><h1 id="7-事件监听"><a href="#7-事件监听" class="headerlink" title="7.事件监听"></a>7.事件监听</h1><p>事件监听相对比较复杂一点，可以为同组件自己编写事件，用lambda表达式，另一种为父组件传递给子组件<br>默认：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button onlick=&#123;&#125;&gt; &lt;/button&gt;<br></code></pre></td></tr></table></figure><p>父组件传递子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Square</span>(<span class="hljs-params">props</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&#123;props.onclick&#125;</span>&gt;</span></span><br><span class="xml">        &#123;props.value&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Board</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">// JSX表达式</span><br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Square</span> </span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">onclick</span> = <span class="hljs-string">&#123;</span> () =&gt;</span> alter(&quot;这里把整个参数传给子组件&quot;)&#125;</span><br><span class="xml">            /&gt;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="8-不可变形"><a href="#8-不可变形" class="headerlink" title="8.不可变形"></a>8.不可变形</h1><p>react官网推荐，在我们给数组或者state修改值时不建议我们直接修改值，而是通过复制的形式，这样有利于以后历史版本等</p><h1 id="9-条件渲染"><a href="#9-条件渲染" class="headerlink" title="9.条件渲染"></a>9.条件渲染</h1><p>条件渲染就是if 等，&amp;&amp; || 呀，不做过多描述。</p><h1 id="10-列表与key"><a href="#10-列表与key" class="headerlink" title="10.列表与key"></a>10.列表与key</h1><p>这是官方文档的，主要是利用数组的map映射+lambda表达式，key作为表示，跟vue的index类似好像，默认利用number.id使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">NumberList</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> numbers = props.numbers;<br>  <span class="hljs-keyword">const</span> listItems = numbers.map(<span class="hljs-function">(<span class="hljs-params">number</span>) =&gt;</span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;number.toString()&#125;</span>&gt;</span></span><br><span class="xml">      &#123;number&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItems&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>ReactDOM.render(<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">NumberList</span> <span class="hljs-attr">numbers</span>=<span class="hljs-string">&#123;numbers&#125;</span> /&gt;</span></span>,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h1 id="11-表单"><a href="#11-表单" class="headerlink" title="11.表单"></a>11.表单</h1><p>这里相对vue来说，比较弱一点点，vue使用v-model标签即可。而react则利用受控组件来实现。这里表单有很多类型，文件，选择，填空等，具体用到再深究，这里只展现一种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NameForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;;<br><br>    <span class="hljs-built_in">this</span>.handleChange = <span class="hljs-built_in">this</span>.handleChange.bind(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">this</span>.handleSubmit = <span class="hljs-built_in">this</span>.handleSubmit.bind(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">handleChange</span>(<span class="hljs-params">event</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">value</span>: event.target.value&#125;);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">handleSubmit</span>(<span class="hljs-params">event</span>)</span> &#123;<br>    alert(<span class="hljs-string">&#x27;提交的名字: &#x27;</span> + <span class="hljs-built_in">this</span>.state.value);<br>    event.preventDefault();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">          名字:</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="12-组件与继承"><a href="#12-组件与继承" class="headerlink" title="12.组件与继承"></a>12.组件与继承</h1><p>组件可以使用父组件向子组件传递参数或者渲染html<br>利用props.children参数即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dialog</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">FancyBorder</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Dialog-title&quot;</span>&gt;</span></span><br><span class="xml">        &#123;props.title&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Dialog-message&quot;</span>&gt;</span></span><br><span class="xml">        &#123;props.message&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">      &#123;props.children&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FancyBorder</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SignUpDialog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.handleChange = <span class="hljs-built_in">this</span>.handleChange.bind(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">this</span>.handleSignUp = <span class="hljs-built_in">this</span>.handleSignUp.bind(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">login</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dialog</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Mars Exploration Program&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">message</span>=<span class="hljs-string">&quot;How should we refer to you?&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.login&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">               <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleSignUp&#125;</span>&gt;</span></span><br><span class="xml">          Sign Me Up!</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Dialog</span>&gt;</span></span><br>    );<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">handleChange</span>(<span class="hljs-params">e</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<span class="hljs-attr">login</span>: e.target.value&#125;);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">handleSignUp</span>(<span class="hljs-params"></span>)</span> &#123;<br>    alert(<span class="hljs-string">`Welcome aboard, <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.state.login&#125;</span>!`</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="13-状态提升（难点）"><a href="#13-状态提升（难点）" class="headerlink" title="13.状态提升（难点）"></a>13.状态提升（难点）</h1><p>一开始观看，看不懂。<br>就是从多组件下，根据单组件下的值变化，其余组件也相应变化时，可以提取为父组件的参数来代替使用。总结就是这句话，具体可以根据文档了解。</p><h1 id="14-React高级和Hook会在下一次进行撰写"><a href="#14-React高级和Hook会在下一次进行撰写" class="headerlink" title="14.React高级和Hook会在下一次进行撰写"></a>14.React高级和Hook会在下一次进行撰写</h1><h1 id="15总结"><a href="#15总结" class="headerlink" title="15总结"></a>15总结</h1><p>这一次学习，进行学习方式的转变。相对而言，很多视频也是根据文档来出的，前提是对文档理解能力要强，我理解能力一般，所以学习起来比较吃力，比如状态提升，一开始看我实属看不懂，但慢慢琢磨也是可以了解大概。假如文档真的看不懂。可以看视频了解一些难以理解的代码块。</p><p>其实react和vue有类似的地方，也有不同的地方。这也说明学习要多方位学习。其实vue也是我上课时间一点点看文档啃下来的，也有一些难以理解。</p><p>其实前端而言，有基于数据存储的，页面跳转的，路由转换的，以及异步请求，数据渲染的，大概的项目都是用到这些板块。</p><p>唯一缺点是：<br>遇到比较难点，我总是喜欢跳着看，这对深度学习是不好的，学习速度还是相对较慢，下次遇到困难还是想办法解决，而不是跳。<br>优点：<br>在正式学习react的前一晚上，我已经初步浏览react的官网，看看react的整体架构，有了了解，在加上今天早上边敲边了解，到下午撰写此博客。相对观看视频而言，快了不少。但也有弊端，有些点没有比视频了解得更深沉一点，所以还是结合使用才行。</p>]]></content>
    
    
    <categories>
      
      <category>前端框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速开发网站资源</title>
    <link href="/2021/06/25/2021-6-25-quickly-develop/"/>
    <url>/2021/06/25/2021-6-25-quickly-develop/</url>
    
    <content type="html"><![CDATA[<h1 id="快速开发网站"><a href="#快速开发网站" class="headerlink" title="快速开发网站"></a>快速开发网站</h1><ul><li><p>简介：</p><p>本次博客是对观看鱼皮的快速开发网站视频来记录其中一些相应的资源链接。视频链接如下</p><blockquote><p><a href="https://www.bilibili.com/video/BV1Nv411h7WG">🔥用这些技术开发网站能事半功倍！来看看你用过没_哔哩哔哩_bilibili</a></p></blockquote></li></ul><span id="more"></span><h2 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h2><ol><li><p>前端管理网站</p><blockquote><p>采用的是Ant Design Pro V4后台管理模板</p><p><a href="https://v4-pro.ant.design/">Ant Design Pro - Out-of-box UI solution for enterprise applications</a></p></blockquote></li><li><p>前端组件</p><blockquote><p>采用的也是Ant的组件</p><p><a href="https://ant.design/index-cn">Ant Design - 一套企业级 UI 设计语言和 React 组件库</a></p></blockquote></li><li><p>前端数据传输</p><blockquote><p>采用的是一个dva的框架</p><p><a href="https://dvajs.com/">德瓦伊斯 (dvajs.com)</a></p></blockquote></li><li><p>前端css</p><blockquote><p>采用的是一款css的框架 less</p><p><a href="http://lesscss.cn/">少一点 (lesscss.cn)</a></p></blockquote></li><li><p>前端JavaScript</p><blockquote><p>采用的是JavaScript的一款框架</p><p><a href="https://www.tslang.cn/">TypeScript中文网 · TypeScript——JavaScript的超集 (tslang.cn)</a></p></blockquote></li></ol><h2 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h2><ol><li><p>​        他推荐的是阿里云云开发</p><p><a href="https://help.aliyun.com/product/161245.html">云开发平台-阿里云 (aliyun.com)</a></p></li><li><p>​        可以用常规的办法，</p><p>后台，基于ssm 、 spring-boot、tomcat也可以搭载后台，但是会相应的比较麻烦一点。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次只是记录相应的资源，方便以后调用。会在后期时间争对这些资源进行深度学习和调用。</p>]]></content>
    
    
    <categories>
      
      <category>资源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>快速开发网站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2021/06/25/2021-6-25-git/"/>
    <url>/2021/06/25/2021-6-25-git/</url>
    
    <content type="html"><![CDATA[<ul><li><p><strong>博客简介</strong></p><p>因为git是常用的版本控制，之前也已经用过，刚好在搭载hexo项目当中反复用到git，之前在开发项目已经用到过git来做版本控制，但不是很深入和归纳，借着这次搭载博客来加强对git的理解。</p><span id="more"></span></li><li><p><strong>git 历史</strong></p><pre><code> Linux内核开源项目有太多人提交代码给作者，结果太多了，于是乎后面迭代演变之后，就诞生git版本控制了。可以说一个Linux生出了git儿子。</code></pre></li><li><p><strong>git与svn的区别</strong></p><pre><code>svn是基于远程服务器的，本地是没有仓库的所有版本代码。而git是基于分布式的，每个开发用户都有远程仓库的所有版本代码。所以此博客只讲git。</code></pre></li><li><p><strong>git 全局配置</strong><br>git的全局配置有两个，一个是system，一个是全局配置。</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --system -l<br><br>相关配置目录如下 <br>git安装目录/etc/gitconfig<br></code></pre></td></tr></table></figure><p>  目录截图如下：<br><img src="https://img-blog.csdnimg.cn/2021062509205064.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>全局配置。一般为上传作为本地用户认证使用，就是证明你是谁。<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">git config --<span class="hljs-built_in">global</span> -l<br>相关配置目录如下 <br><span class="hljs-attr">C</span>:<span class="hljs-regexp">/Users/</span>用户名/.gitconfig<br></code></pre></td></tr></table></figure></p><p>  配置个人用户</p>  <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> = <span class="hljs-string">&quot;&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">// 填写用户名和用户邮箱即可</span><br></code></pre></td></tr></table></figure><p>​        </p><ul><li><p><strong>git 工作原理</strong></p><ol><li><p>  有四个区域</p><pre><code>   当地目录：就是本地文件啦     暂存区：通过add 提交到暂存区，可以通过git status查看是否上传到暂存区，或者查看是否被追踪     本地仓库： 通过commit 上传到本地仓库     远程仓库： gitee或者github上的仓库创建</code></pre></li><li><p>  命令集合：</p><pre><code>         当地目录 -》暂存区 -》本地仓库 -》 远程仓库                          add   -》    commit      -》    push                       《-checkout《-reset   《-    pull</code></pre></li></ol></li><li><p><strong>git 项目创建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>或者<br>git <span class="hljs-built_in">clone</span> 【url】<br></code></pre></td></tr></table></figure></li><li><p><strong>git 项目提交</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add . <br>提交到暂存区，追踪文件<br>git commit -m <span class="hljs-string">&quot;&quot;</span><br>提交到本地仓库<br>git push<br>提交到远程仓库<br>git push orign master<br>提交到远程仓库的master分支<br></code></pre></td></tr></table></figure></li><li><p><strong>git 忽略项目</strong></p><p>默认生成的git项目下，有文件可以忽略不要提交的内容</p></li><li><p>git 远程仓库</p><p>git init</p><p>将.git文件复制到项目中即可</p></li><li><p>git ssh</p><p>提交免登录，通过</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;标识你的认证（邮箱，主机名即可）&quot;</span><br></code></pre></td></tr></table></figure><pre><code>C:/User/用户名/.ssh</code></pre><p>  ssh是针对每次上传的时候免用户名和密码登录。直接github配置密钥即可</p><ul><li><strong>git 分支</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 此代码为创建分支 如不加后缀，则是查看所有的分支<br>git branch 【】<br>// 切换分支<br>git checkout 【】<br>// 合并分支，将【】内的分支合并到当前的分支<br>git merge 【】<br></code></pre></td></tr></table></figure><h2 id="假如出现分支冲突"><a href="#假如出现分支冲突" class="headerlink" title="假如出现分支冲突"></a>假如出现分支冲突</h2><p>一种是重新修改文件，或者选择到底保存谁的修改文件。</p>]]></content>
    
    
    <categories>
      
      <category>版本管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于ElasticSearch-7.9.2-实现京东搜索关键字高亮</title>
    <link href="/2021/06/24/2021-6-24-es-update/"/>
    <url>/2021/06/24/2021-6-24-es-update/</url>
    
    <content type="html"><![CDATA[<p>基于ElasticSearch-7.9.2-实现京东搜索关键字高亮</p><span id="more"></span><p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h1 id="1-爬虫数据，存储es"><a href="#1-爬虫数据，存储es" class="headerlink" title="1.爬虫数据，存储es"></a>1.爬虫数据，存储es</h1><h2 id="1-1导入依赖"><a href="#1-1导入依赖" class="headerlink" title="1.1导入依赖"></a>1.1导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.es<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-es-jd<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springboot-es-jd<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jsoup<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsoup<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.13.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.76<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="1-2使用Jsoup爬取数据"><a href="#1-2使用Jsoup爬取数据" class="headerlink" title="1.2使用Jsoup爬取数据"></a>1.2使用Jsoup爬取数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.es.utils;<br><br><span class="hljs-keyword">import</span> com.es.entity.Stuff;<br><span class="hljs-keyword">import</span> org.jsoup.Jsoup;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Document;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Element;<br><span class="hljs-keyword">import</span> org.jsoup.select.Elements;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsoupComponent</span> </span>&#123;<br><br>    <span class="hljs-comment">// public static String USER_AGENT = &quot;User-Agent&quot;;</span><br>    <span class="hljs-comment">// public static String USER_AGENT_VALUE = &quot;&quot;;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Stuff&gt; <span class="hljs-title">getDataFormJD</span><span class="hljs-params">(String keyswords)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 获取路径</span><br>        String url = <span class="hljs-string">&quot;https://search.jd.com/Search?keyword=&quot;</span> + keyswords;<br>        <span class="hljs-comment">// 爬取数据</span><br>        Document document = Jsoup.parse(<span class="hljs-keyword">new</span> URL(url),<span class="hljs-number">3000</span>);<br>        Element j_goodsList = document.getElementById(<span class="hljs-string">&quot;J_goodsList&quot;</span>);<br>        Elements li1 = j_goodsList.getElementsByTag(<span class="hljs-string">&quot;li&quot;</span>);<br>        <span class="hljs-comment">// 利用stuffs去获取</span><br>        List&lt;Stuff&gt; stuffs = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// Jsoup爬取元素</span><br>        <span class="hljs-keyword">for</span> (Element li : li1) &#123;<br>            String picurl = li.getElementsByTag(<span class="hljs-string">&quot;img&quot;</span>).eq(<span class="hljs-number">0</span>).attr(<span class="hljs-string">&quot;data-lazy-img&quot;</span>);<br>            String price = li.getElementsByClass(<span class="hljs-string">&quot;p-price&quot;</span>).text();<br>            String title = li.getElementsByClass(<span class="hljs-string">&quot;p-name&quot;</span>).select(<span class="hljs-string">&quot;em&quot;</span>).text();<br>            stuffs.add(<br>                    Stuff.builder().name(title).url(picurl).price(price).build()<br>            );<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> stuffs;<br>&#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="2-从es获取数据呈现页面中"><a href="#2-从es获取数据呈现页面中" class="headerlink" title="2.从es获取数据呈现页面中"></a>2.从es获取数据呈现页面中</h1><h2 id="2-1编写配置类"><a href="#2-1编写配置类" class="headerlink" title="2.1编写配置类"></a>2.1编写配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.es.config;<br><br><span class="hljs-keyword">import</span> org.apache.http.HttpHost;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticSearchConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title">restHighLevelClient</span><span class="hljs-params">()</span> </span>&#123;<br>        RestHighLevelClient client = <span class="hljs-keyword">new</span> RestHighLevelClient(<br>                RestClient.builder(<br>                        <span class="hljs-keyword">new</span> HttpHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9200</span>, <span class="hljs-string">&quot;http&quot;</span>)));<br>        <span class="hljs-keyword">return</span> client;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-2编写Service"><a href="#2-2编写Service" class="headerlink" title="2.2编写Service"></a>2.2编写Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.es.service;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.es.config.ElasticSearchConfiguration;<br><span class="hljs-keyword">import</span> com.es.entity.Stuff;<br><span class="hljs-keyword">import</span> com.es.utils.JsoupComponent;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.index.IndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchRequestBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RequestOptions;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.common.text.Text;<br><span class="hljs-keyword">import</span> org.elasticsearch.common.unit.TimeValue;<br><span class="hljs-keyword">import</span> org.elasticsearch.common.xcontent.XContentType;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.*;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHit;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHits;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightField;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.query.QuerySearchRequest;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetDataAndPutDataService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    JsoupComponent jsoupComponent;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-comment">// 插入数据方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">insertDataToEs</span><span class="hljs-params">(String keywords)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 利用多数据插入BulkRequest</span><br>        BulkRequest bulkRequest = <span class="hljs-keyword">new</span> BulkRequest();<br>        <br>        <span class="hljs-comment">// 先获取数据 利用Jsoup</span><br>        List&lt;Stuff&gt; dataFormJD = jsoupComponent.getDataFormJD(keywords);<br>        <br>        <span class="hljs-comment">// 再将逐一插入BulkRequest 默认的id。需要转JSON数据</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; dataFormJD.size();i++) &#123;<br>            bulkRequest.add(<span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;jd_list&quot;</span>)<br>                    .source(JSON.toJSONString(dataFormJD.get(i)), XContentType.JSON));<br>        &#125;<br><br>        <span class="hljs-comment">// 实现插入</span><br>        BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);<br>        <span class="hljs-keyword">return</span> bulk.status().toString();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取数据，未高亮</span><br>    <span class="hljs-keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; getDataFromEs(String keywords,<span class="hljs-keyword">int</span> pageNo,<span class="hljs-keyword">int</span> pageSize) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 利用SearchRequest执行操作</span><br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;jd_list&quot;</span>);<br>        <br>        <span class="hljs-comment">// 利用SearchSourceBuilder构建查询条件</span><br>        SearchSourceBuilder srb = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>        <span class="hljs-comment">// 采用分页</span><br>        srb.from(pageNo);<br>        srb.size(pageSize);<br><br>        <span class="hljs-comment">// 查询。trem是精确查询，可用于数字或者全中查询，这里只查关键字。则用matchQuery</span><br>        <span class="hljs-comment">// 利用QueryBuilders工具类建立具体查询条件</span><br>        MatchQueryBuilder termQueryBuilder = QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, keywords);<br><br><br>        <span class="hljs-comment">// srb.query(termQueryBuilder);</span><br>        srb.query(termQueryBuilder);<br><br>        srb.timeout(<span class="hljs-keyword">new</span> TimeValue(<span class="hljs-number">60</span>, TimeUnit.SECONDS));<br><br>        <span class="hljs-comment">// 加入SearchRequest</span><br>        searchRequest.source(srb);<br>        <br>        <span class="hljs-comment">// 实现查询，返回的是hits的数组。</span><br>        SearchResponse response = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>        ArrayList&lt;Map&lt;String,Object&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span>(SearchHit documentFields : response.getHits().getHits())&#123;<br>            list.add(documentFields.getSourceAsMap());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3-获取高亮关键字"><a href="#3-获取高亮关键字" class="headerlink" title="3.获取高亮关键字"></a>3.获取高亮关键字</h1><h2 id="3-1-编写Service"><a href="#3-1-编写Service" class="headerlink" title="3.1 编写Service"></a>3.1 编写Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; getDataFromEsToHightLight(String keywords,<span class="hljs-keyword">int</span> pageNo,<span class="hljs-keyword">int</span> pageSize) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 利用SearchRequest执行操作</span><br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;jd_list&quot;</span>);<br>        SearchSourceBuilder srb = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>        <span class="hljs-comment">// 采用分页</span><br>        srb.from(pageNo);<br>        srb.size(pageSize);<br><br>        <span class="hljs-comment">// 查询。trem是精确查询，可用于数字或者全中查询，这里只查关键字。则用matchQuery</span><br>        <span class="hljs-comment">// 利用QueryBuilders工具类建立具体查询条件</span><br>        MatchQueryBuilder termQueryBuilder = QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, keywords);<br><br><br>        <span class="hljs-comment">// srb.query(termQueryBuilder);</span><br>        srb.query(termQueryBuilder);<br><br>        srb.timeout(<span class="hljs-keyword">new</span> TimeValue(<span class="hljs-number">60</span>, TimeUnit.SECONDS));<br><br><br>        <span class="hljs-comment">// 设置高亮。并且添加高亮代码</span><br>        HighlightBuilder highlighter = <span class="hljs-keyword">new</span> HighlightBuilder();<br>        <span class="hljs-comment">// 是否设置多个关键字显示</span><br>        highlighter.requireFieldMatch(<span class="hljs-keyword">false</span>);<br>        highlighter.field(<span class="hljs-string">&quot;name&quot;</span>);<br>        highlighter.preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);<br>        highlighter.postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>);<br><br><br><br>        srb.highlighter(highlighter);<br><br>        searchRequest.source(srb);<br><br>        <span class="hljs-comment">// 查询</span><br>        SearchResponse response = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>        ArrayList&lt;Map&lt;String,Object&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><br><br>        <span class="hljs-keyword">for</span>(SearchHit documentFields : response.getHits().getHits())&#123;<br>            Map&lt;String, HighlightField&gt; highlightFields = documentFields.getHighlightFields();<br>            <span class="hljs-comment">// 将返回的查询先获取高亮</span><br>            HighlightField name = highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>);<br>            Map&lt;String, Object&gt; sourceAsMap = documentFields.getSourceAsMap();<br>            <span class="hljs-comment">// 假如有高亮，则替换原先无高亮的关键字属性</span><br>            <span class="hljs-keyword">if</span>(name != <span class="hljs-keyword">null</span>)&#123;<br>                Text[] fragments = name.fragments();<br>                String n_name = <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">for</span>(Text text : fragments)&#123;<br>                    n_name += text;<br>                &#125;<br>                sourceAsMap.put(<span class="hljs-string">&quot;name&quot;</span>,n_name);<br>            &#125;<br>            list.add(sourceAsMap);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="4-相应页面与实体类"><a href="#4-相应页面与实体类" class="headerlink" title="4.相应页面与实体类"></a>4.相应页面与实体类</h1><h2 id="4-1-实体类"><a href="#4-1-实体类" class="headerlink" title="4.1 实体类"></a>4.1 实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.es.entity;<br><br><span class="hljs-keyword">import</span> lombok.Builder;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stuff</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String price;<br>    <span class="hljs-keyword">private</span> String url;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-2-页面"><a href="#4-2-页面" class="headerlink" title="4.2 页面"></a>4.2 页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span> <span class="hljs-attr">xmlns:v-model</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Java-ES仿京东实战<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/style.css&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mallPage&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; mallist tmall- page-not-market &quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 头部搜索 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; header-list-app&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;headerLayout&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;headerCon &quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- Logo--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mallLogo&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/images/jdlogo.png&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-extra&quot;</span>&gt;</span><br><br>                        <span class="hljs-comment">&lt;!--搜索--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mallSearch&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mall-search&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;searchTop&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mallSearch-form clearfix&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>天猫搜索<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mallSearch-input clearfix&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s-combobox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;s-combobox-685&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s-combobox-input-wrap&quot;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dd&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mq&quot;</span></span><br><span class="hljs-tag">                                                       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s-combobox-input&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;getData()&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchbtn&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;relKeyTop&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>前端<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>Linux<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>大数据<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>理财<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 商品详情页面 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 品牌分类 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navAttrsForm&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;attrs j_NavAttrs&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:block&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;brandAttr j_nav_brand&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;j_Brand attr&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;attrKey&quot;</span>&gt;</span><br>                                    品牌<br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;attrValues&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;av-collapse row-2&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span> 狂神说 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span> Java <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 排序规则 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter clearfix&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fSort fSort-cur&quot;</span>&gt;</span>综合<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;f-ico-arrow-d&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fSort&quot;</span>&gt;</span>人气<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;f-ico-arrow-d&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fSort&quot;</span>&gt;</span>新品<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;f-ico-arrow-d&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fSort&quot;</span>&gt;</span>销量<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;f-ico-arrow-d&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fSort&quot;</span>&gt;</span>价格<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;f-ico-triangle-mt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;f-ico-triangle-mb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                <span class="hljs-comment">&lt;!-- 商品详情 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;view grid-nosku&quot;</span>&gt;</span><br><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;product&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;product in result&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;product-iWrap&quot;</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!--商品封面--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;productImg-wrap&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;productImg&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;product.url&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!--价格--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;productPrice&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>&#123;&#123;product.price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!--标题--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;productTitle&quot;</span> &gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;product.name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 店铺名 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;productShop&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>店铺： 狂神说Java <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 成交信息 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;productStatus&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>月成交<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>999笔<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>评价 <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span> : <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">            <span class="hljs-attr">keywords</span> : <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">result</span>:[]</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">getData</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> key = <span class="hljs-built_in">this</span>.keywords;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(key);</span><br><span class="javascript">                axios.get(<span class="hljs-string">&#x27;/get/&#x27;</span>+key+<span class="hljs-string">&#x27;/1/10&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(res);</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.result = res.data;</span><br><span class="javascript">                &#125;)</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h1><p>首先本文并没有写出控制类，请自行编写，其次网页的静态文件也没有写出，原因是实在太多了，这里只是提供一些方法而已。<br>在编写的时候，有以下反思：</p><ul><li>在网页中如果要整合Vue和axios，直接在标签中引入即可，也可以将网页中的js复制拷贝到本地，在引入即可使用，方便快捷。</li><li>trem 和 match  两种查询的方式，看主要需求，一开始用trem查询，查询不出来，原因是精确查询，而且字段类型是keywords，固然查不出来，而match的话，是模糊查询的一种，可以查出。</li><li> 相应的es的rest风格的代码还不够熟练。需要多加练习。</li><li>在多条件查询下，es是使用SearchRequest 、SearchSourceBuilder、和工具类QueryBuilders使用的。</li><li> 可以利用Jsoup进行简单网页代码解析，但是如果遇到需要登陆的页面，使用Jsoup需要通过其他方式，而且有些网页爬取出来的是利用js代码曾现的数据，如豆*网页，所以得利用其余进行爬取数据，具体未来再展开。</li></ul>]]></content>
    
    
    <categories>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人电脑重装</title>
    <link href="/2021/06/23/system-reload/"/>
    <url>/2021/06/23/system-reload/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85">TOC</a><br>因为手贱，改了系统的参数之后，电脑无法正常开机，后来通过笔记本的恢复出厂，恢复电脑，那就根据这一次重装进行对电脑整体的清理和修改。</p><span id="more"></span><h1 id="基本软件"><a href="#基本软件" class="headerlink" title="基本软件"></a>基本软件</h1><ul><li>一些基本软件，在安装的时候需要把所有缓存路径改为非c盘</li></ul><p><img src="https://img-blog.csdnimg.cn/2021062317321480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="程序软件"><a href="#程序软件" class="headerlink" title="程序软件"></a>程序软件</h1><p>程序软件就有很多要下载了，基本的安装包都上传阿里云网盘了。以下是一些在安装软件时用到的博客。</p><ul><li><p>Maven安装</p><blockquote><p><a href="https://blog.csdn.net/a805814077/article/details/100545928">https://blog.csdn.net/a805814077/article/details/100545928</a></p></blockquote></li><li><p> Mysql8.0安装</p><blockquote><p><a href="https://www.cnblogs.com/myqlanzhuangjiaocheng/p/mysqlanzhuang.html">https://www.cnblogs.com/myqlanzhuangjiaocheng/p/mysqlanzhuang.html</a></p></blockquote></li><li><p>git的安装</p><blockquote><p><a href="https://blog.csdn.net/weixin_49457021/article/details/111934543?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_49457021/article/details/111934543?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a></p></blockquote></li><li><p>Node的安装</p><blockquote><p><a href="https://blog.csdn.net/Small_Yogurt/article/details/104968169">https://blog.csdn.net/Small_Yogurt/article/details/104968169</a></p></blockquote></li><li><p>IDEA的安装</p><blockquote><p><a href="https://www.bilibili.com/read/cv5707434/">https://www.bilibili.com/read/cv5707434/</a></p></blockquote></li><li><p>jdk</p></li></ul><blockquote><p><a href="https://blog.csdn.net/wyg1973017714/article/details/105151443">https://blog.csdn.net/wyg1973017714/article/details/105151443</a></p></blockquote><ul><li>vmware16永久激活密钥 （官网下载即可）</li></ul><blockquote><p>ZF3R0-FHED2-M80TY-8QYGC-NPKYF<br>YF390-0HF8P-M81RQ-2DXQE-M2UT6<br>ZF71R-DMX85-08DQY-8YMNC-PPHV8</p></blockquote><p>推荐三个文本和笔记软件</p><ul><li>Typora  ：markdown文档编辑器</li><li>Sublime Text3 ： xml、html文本展示</li><li>Xmind ：思维导图</li></ul><p><img src="https://img-blog.csdnimg.cn/202106231740347.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
    <tags>
      
      <tag>系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/23/hello-world/"/>
    <url>/2021/06/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch初探</title>
    <link href="/2021/06/21/es-api/"/>
    <url>/2021/06/21/es-api/</url>
    
    <content type="html"><![CDATA[<p>初探ElasticSearch</p><span id="more"></span><h2 id="ELasticSerach-7-9-2安装过程"><a href="#ELasticSerach-7-9-2安装过程" class="headerlink" title="ELasticSerach 7.9.2安装过程"></a>ELasticSerach 7.9.2安装过程</h2><h2 id="1-windows下总安装文件"><a href="#1-windows下总安装文件" class="headerlink" title="1.windows下总安装文件"></a>1.windows下总安装文件</h2><p>分为以下步骤<br> ELasticSerach 搜索引擎<br> ELasticSerach-head 可视化界面<br> kiBana 请求器<br> ik  分词器<br> 相关华为镜像下载地址：<br> ElasticSearch: <a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D">https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D</a><br>logstash: <a href="https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D">https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D</a><br>kibana: <a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a></p><h2 id="1-1-ELasticSerach"><a href="#1-1-ELasticSerach" class="headerlink" title="1.1 ELasticSerach"></a>1.1 ELasticSerach</h2><p>下载地址</p><blockquote><p> ElasticSearch: <a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D">https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D</a></p></blockquote><p>出现闪退的原因<br>一种是内存过大，则需要调整</p><blockquote><p>config/jvm.options</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210610233604641.png" alt="在这里插入图片描述"><br>另一种原因则</p><blockquote><p>config/elasticSerach.yml</p></blockquote><p>在该文件下添加以下命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xpack.ml.enabled: false<br></code></pre></td></tr></table></figure><h2 id="1-2-elasticsearch-head-master-可视化界面"><a href="#1-2-elasticsearch-head-master-可视化界面" class="headerlink" title="1.2 elasticsearch-head-master 可视化界面"></a>1.2 elasticsearch-head-master 可视化界面</h2><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><blockquote><p>在目录下安装即可<br>cnpm install<br>npm run start</p></blockquote><p>解决跨域问题<br>则在ElasticSearch目录下</p><blockquote><p>config/elasticSerach.yml<br>添加</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">http.cors.enabled: true<br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure><h2 id="1-3-kibana-7-9-2-windows-x86-64"><a href="#1-3-kibana-7-9-2-windows-x86-64" class="headerlink" title="1.3 kibana-7.9.2-windows-x86_64"></a>1.3 kibana-7.9.2-windows-x86_64</h2><blockquote><p>下载地址<br>kibana: <a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a><br>修改目录config/kibana.yml<br>`i18n.locale: “zh-CN”</p></blockquote><h2 id="1-4-ik分词器"><a href="#1-4-ik分词器" class="headerlink" title="1.4 ik分词器"></a>1.4 ik分词器</h2><blockquote><p>下载地址：<br><a href="https://github.com/medcl/elasticsearch-analysis-ik/tags">https://github.com/medcl/elasticsearch-analysis-ik/tags</a></p></blockquote><p><strong>注意版本要跟ElasticSearch一致</strong><br>采用倒排排序，先找词再找文档。</p><p>直接把文件目录放在elasticsearch目录下的plugins里，新建ik文件夹，重开<br>elasticsearch即可自动加入插件</p><p>需要添加自己定义的分词库<br>则在</p><blockquote><p>ik/config/IKAnalyzer.cfg.xml添加<br>并自定义建立dic文件</p></blockquote><h2 id="ELasticSerach-核心概念"><a href="#ELasticSerach-核心概念" class="headerlink" title="ELasticSerach 核心概念"></a>ELasticSerach 核心概念</h2><p>与传统数据库对应<br>| 传统数据库 |ES  |<br>|–|–|<br>| 数据库 |索引  |<br>|  表|类型  |<br>|  记录|文档  |<br>|  属性| 域 |</p><p>并且采用的是倒排排序。</p><h2 id="Rest风格"><a href="#Rest风格" class="headerlink" title="Rest风格"></a>Rest风格</h2><table><thead><tr><th>请求方法</th><th>url</th><th>说明</th></tr></thead><tbody><tr><td>PUT</td><td>/索引名/类型名/文档名</td><td>新建</td></tr><tr><td>POST</td><td>/索引名/类型名/文档名_update</td><td>更新</td></tr><tr><td>GET</td><td>/索引名/类型名/文档名</td><td>搜索</td></tr><tr><td>DELETE</td><td>/索引名/类型名/文档名</td><td>删除</td></tr><tr><td>GET</td><td>/索引名/类型名/_search</td><td>复合搜索</td></tr><tr><td>PUT</td><td>/索引名/类型名/文档名</td><td>更新</td></tr></tbody></table><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li>基础</li></ul><blockquote><p>PUT  /index/_doc/1<br>{<br>    “name” : “czx”,<br>“ago” : 23<br>}<br>// 创建文档，_doc为默认文档类型</p></blockquote><blockquote><p>PUT /index/<br>{<br>“mappings” ：{<br>properties:{<br>  name:{<br>     “type”:”text”<br>}<br>    }<br>}<br>}<br>// 设置相应的字段</p></blockquote><blockquote><p>POST /index/_doc/1_update<br>{<br>“doc”:{<br>    “name”  : “czx”<br>}<br>}<br>// 修改相应的字段</p></blockquote><blockquote><p>GET /index/_doc/1<br>// 获取该索引</p></blockquote><blockquote><p>GET /cat_health<br>// 获取健康值</p></blockquote><blockquote><p>DELETE /index/_doc/1<br>DELETE /index/<br>// 删除</p></blockquote><ul><li>高级</li></ul><p> 1.基础查询</p><p> 2.高级查询</p><h2 id="整合spring-boot-常用API"><a href="#整合spring-boot-常用API" class="headerlink" title="整合spring-boot 常用API"></a>整合spring-boot 常用API</h2><p>引入依赖，版本要跟elasticsearch要一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>撰写配置类，本次采用的是RestHighLevelClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticSearchConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title">restHighLevelClient</span><span class="hljs-params">()</span></span>&#123;<br>        RestHighLevelClient client = <span class="hljs-keyword">new</span> RestHighLevelClient(<br>                RestClient.builder(<br>                        <span class="hljs-keyword">new</span> HttpHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9200</span>, <span class="hljs-string">&quot;http&quot;</span>)));<br>        <span class="hljs-keyword">return</span> client;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> 新建user、索引api、文档api</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer ago;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xc.springboot_es_jpa;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.xc.springboot_es_jpa.entity.User;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.get.GetRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.get.GetResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.index.IndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.update.UpdateRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.update.UpdateResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RequestOptions;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.indices.GetIndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.indices.GetIndexResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.common.xcontent.XContentType;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.QueryBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.QueryBuilders;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.TermQueryBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHits;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.fetch.subphase.FetchSourceContext;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootEsJpaApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-comment">// 索引</span><br>    <span class="hljs-comment">// xxxindexRquest Create Get Delete</span><br>    <span class="hljs-comment">// RestHighLevelClient.indices(). exist get delete</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        CreateIndexRequest createIndexRequest = <span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;student&quot;</span>);<br>        CreateIndexResponse createIndexResponse = restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);<br>        System.out.println(createIndexResponse);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 获得索引</span><br>    <span class="hljs-comment">// GetIndexRequst</span><br>    <span class="hljs-comment">// indeices（）.exists()</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        GetIndexRequest getIndexRequest = <span class="hljs-keyword">new</span> GetIndexRequest(<span class="hljs-string">&quot;spring-boot&quot;</span>);<br>        Boolean judege = restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);<br>        System.out.println(judege);<br>    &#125;<br><br>    <span class="hljs-comment">// 删除索引</span><br>    <span class="hljs-comment">// DeleteIndexRequest</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        DeleteIndexRequest deleteIndexRequest = <span class="hljs-keyword">new</span> DeleteIndexRequest(<span class="hljs-string">&quot;spring-boot&quot;</span>);<br>        AcknowledgedResponse delete = restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);<br>        System.out.println(delete.isAcknowledged());<br>    &#125;<br><br>    <span class="hljs-comment">// 文档</span><br>    <span class="hljs-comment">// IndexRequst source id timeout</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// restHighLevelClient.index</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">creteDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        IndexRequest student = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;student&quot;</span>);<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx&quot;</span>,<span class="hljs-number">23</span>);<br>        student.id(<span class="hljs-string">&quot;1&quot;</span>);<br>        student.source(JSON.toJSONString(user),XContentType.JSON);<br>        student.timeout(<span class="hljs-string">&quot;1s&quot;</span>);<br><br>        restHighLevelClient.index(student,RequestOptions.DEFAULT);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取文档</span><br>    <span class="hljs-comment">// GetRequest</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  IOException</span>&#123;<br>        GetRequest getRequest = <span class="hljs-keyword">new</span> GetRequest(<span class="hljs-string">&quot;student&quot;</span>);<br>        getRequest.id(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-comment">// 不获取返回的_source的上下文</span><br>        getRequest.fetchSourceContext(<span class="hljs-keyword">new</span> FetchSourceContext(<span class="hljs-keyword">false</span>));<br>        getRequest.storedFields(<span class="hljs-string">&quot;_none_&quot;</span>);<br><br>        GetResponse documentFields = restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);<br>        System.out.println(documentFields.toString());<br>        System.out.println(documentFields.getSource().toString());<br>        System.out.println(documentFields.getSourceAsString());<br>    &#125;<br><br><br><br>    <span class="hljs-comment">// 更新</span><br>    <span class="hljs-comment">// UpdateRequest</span><br>    <span class="hljs-comment">// UpdateRequest.doc</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        UpdateRequest updateRequest = <span class="hljs-keyword">new</span> UpdateRequest(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx&quot;</span>,<span class="hljs-number">24</span>);<br>        updateRequest.doc(JSON.toJSONString(user),XContentType.JSON);<br>        UpdateResponse updateResponse = restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);<br>        <br>    &#125;<br><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-comment">// DeleteRequest</span><br>    <span class="hljs-comment">// delete</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  IOException</span>&#123;<br>        DeleteRequest deleteRequest = <span class="hljs-keyword">new</span> DeleteRequest(<span class="hljs-string">&quot;student&quot;</span>);<br>        deleteRequest.id(<span class="hljs-string">&quot;1&quot;</span>);<br>        restHighLevelClient.delete(deleteRequest,RequestOptions.DEFAULT);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//批量添加</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bulkDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BulkRequest bulkRequest = <span class="hljs-keyword">new</span> BulkRequest();<br>        ArrayList&lt;User&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx1&quot;</span>,<span class="hljs-number">21</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx2&quot;</span>,<span class="hljs-number">21</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx3&quot;</span>,<span class="hljs-number">21</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx4&quot;</span>,<span class="hljs-number">21</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;czx5&quot;</span>,<span class="hljs-number">21</span>));<br><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; users.size() ; i++)&#123;<br>            bulkRequest.add(<span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;student&quot;</span>)<br>            .id(<span class="hljs-string">&quot;&quot;</span>+i)<br>            .source(JSON.toJSONString(users.get(i)),XContentType.JSON));<br>        &#125;<br><br>        BulkResponse bulkResponse = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);<br>        System.out.println(bulkResponse.status());<br>    &#125;<br><br>    <span class="hljs-comment">// 高级查询</span><br>    <span class="hljs-comment">// SearchRequest 查询</span><br>    <span class="hljs-comment">// SearchSourceBuilder 结果</span><br>    <span class="hljs-comment">// QueryBuilders 条件</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">searchDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;student&quot;</span>);<br>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br><br>        <span class="hljs-comment">// QueryBuilders.termQuery();</span><br>        <span class="hljs-comment">// QueryBuilders.matchAllQuery();</span><br>        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;czx1&quot;</span>);<br>        searchSourceBuilder.query(termQueryBuilder);<br>        searchRequest.source(searchSourceBuilder);<br>        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>        SearchHits hits = searchResponse.getHits();<br>        System.out.println(JSON.toJSONString(hits.getHits()));<br>        System.out.println(<span class="hljs-string">&quot;======================&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo个人博客搭载</title>
    <link href="/2021/06/20/hexo/"/>
    <url>/2021/06/20/hexo/</url>
    
    <content type="html"><![CDATA[<p>如何搭载hexo博客</p><span id="more"></span><p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h1 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h1><h2 id="node-js-git-gtibash"><a href="#node-js-git-gtibash" class="headerlink" title="node.js git gtibash"></a>node.js git gtibash</h2><p>node.js 是用来创建项目，和下载一些依赖的。自行百度下载<br>git 这个的话自行下载吧，下完后有自带的gitbash。</p><h1 id="github创建仓库"><a href="#github创建仓库" class="headerlink" title="github创建仓库"></a>github创建仓库</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>在自己的github仓库上创建新仓库<br>注意：仓库名为如下标准</p><blockquote><p>用户名.github.io</p></blockquote><p>注意用户名需要和你的github的用户名要一致。大小写也要一致<br><img src="https://img-blog.csdnimg.cn/20210620111126197.png" alt="在这里插入图片描述"></p><h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><p>之前已经配置ssh的话就忽略这步骤<br>在gitbash 下输入这条语句</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh<span class="hljs-literal">-keygen</span> <span class="hljs-literal">-t</span> rsa <span class="hljs-literal">-C</span> <span class="hljs-string">&quot;你注册的邮箱名&quot;</span><br></code></pre></td></tr></table></figure><p>之后去寻找曾现的路径，打开id_rsa.pub文件复制ssh到github中。</p><blockquote><p>个人用户-setting-ssh and gpc keys</p></blockquote><p>新建，然后名字随便起，内容为你复制的ssh keys，点击完成。<br><img src="https://img-blog.csdnimg.cn/20210620104800659.png" alt="在这里插入图片描述"><br>之后在gitbash配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git config -<span class="hljs-literal">-global</span> user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config -<span class="hljs-literal">-global</span> user.name <span class="hljs-string">&quot;邮箱&quot;</span><br></code></pre></td></tr></table></figure><h1 id="hexo项目"><a href="#hexo项目" class="headerlink" title="hexo项目"></a>hexo项目</h1><ul><li>首先在node.js安装好的前提下<br>建一个文件夹来存放hexo项目的内容</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span>  进入该文件夹<br></code></pre></td></tr></table></figure><ul><li>输入安装装hexo命令：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm i <span class="hljs-literal">-g</span> hexo<br></code></pre></td></tr></table></figure><ul><li>查看版本</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo <span class="hljs-literal">-v</span><br></code></pre></td></tr></table></figure><ul><li>初始化项目<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo init<br></code></pre></td></tr></table></figure></li></ul><p>生成以下文件<br><img src="https://img-blog.csdnimg.cn/20210620105331907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyOTQxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>主要配置是_config.yml<br>node_modules：依赖包<br>public：存放的是已经生成的页面<br>scaffolds：命令生成文章等的一些模板<br>source：用命令创建的各种文章<br>package.json：项目所需依赖的信息</li></ul><ul><li>修改_config.yml内容绑定远程仓库</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">deploy: <br>  type: git<br>  repository: git@github.com:用户名/用户名.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>注意这里的分支要和你建的仓库的主分支要对应</p><p>注意：<br>需要添加REMAD.md在source文件夹下<br>之后在_config.yml里添加上传不要转换为html格式</p><blockquote><p>skip_render: README.md</p></blockquote><h2 id="运行本地项目"><a href="#运行本地项目" class="headerlink" title="运行本地项目"></a>运行本地项目</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo clean <br>hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><p>访问 <a href="http://localhost:4000查看">http://localhost:4000查看</a></p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>在以下网站寻找你想要的主题</p><blockquote><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><p>然后在你的gitbash当中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git clone 主题仓库路径 themes/主题名<br></code></pre></td></tr></table></figure><p>之后在hexo项目的_config.yml修改主题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">theme: 主题文件名<br></code></pre></td></tr></table></figure><p>之后执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><h2 id="上传部署"><a href="#上传部署" class="headerlink" title="上传部署"></a>上传部署</h2><p>（前提你的github仓库创建完成以及相应git的配置信息正确）</p><p>先安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install hexo<span class="hljs-literal">-deployer</span><span class="hljs-literal">-git</span> -<span class="hljs-literal">-save</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo d<br></code></pre></td></tr></table></figure><p>去到github中查看文件是否上传成功，此生成的文件跟hexo目录下的文件是不一样的，是生成一些静态的文件。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>直接浏览器地址访问仓库名</p><blockquote><p>用户名.github.io </p></blockquote><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>在hexo目录下，gitbash</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new ”博客名“<br></code></pre></td></tr></table></figure><p>在source/_posts 下编写文本，支持md，然后再执行生成，上传</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo <span class="hljs-literal">-clean</span><br>hexo <span class="hljs-literal">-g</span><br>hexo <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其余的配置，主要查看主题的相应配置，不同主题配置也不同。<br>其实有些省略步骤，也有些不足，请直接提出来即可。<br>至于绑定域名以后再说。<br>本次主题应用的是如下</p><blockquote><p><a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a><br>绑定域名，可参照以下链接。<br><a href="https://www.cnblogs.com/visugar/p/6821777.html">https://www.cnblogs.com/visugar/p/6821777.html</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2021/06/19/my-first-blog/"/>
    <url>/2021/06/19/my-first-blog/</url>
    
    <content type="html"><![CDATA[<p>羊文学<br>Yangwenxue-czx</p><p>欢迎来到我个人博客<br>在此以此博客记录在个人博客网站下撰写的第一条博客</p>]]></content>
    
    
    
    <tags>
      
      <tag>第一篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
